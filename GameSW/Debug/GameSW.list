
GameSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba0  08004ba0  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba8  08004ba8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08004bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000180  08004d30  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004d30  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e280  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b7  00000000  00000000  0002e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  000308e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020865  00000000  00000000  00031d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1cf  00000000  00000000  000525ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0a0f  00000000  00000000  000607bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001211cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd0  00000000  00000000  0012121c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049dc 	.word	0x080049dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000184 	.word	0x20000184
 80001cc:	080049dc 	.word	0x080049dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <__NVIC_EnableIRQ+0x38>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db12      	blt.n	80005e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	490a      	ldr	r1, [pc, #40]	; (80005f4 <__NVIC_DisableIRQ+0x44>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	3320      	adds	r3, #32
 80005d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000e100 	.word	0xe000e100

080005f8 <game_init>:
#include "game_if.h"

void game_init(char* player_one_name, char* player_two_name)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    /* Disable IRQN */
    NVIC_DisableIRQ(EXTI0_IRQn);
 8000602:	2006      	movs	r0, #6
 8000604:	f7ff ffd4 	bl	80005b0 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI1_IRQn);
 8000608:	2007      	movs	r0, #7
 800060a:	f7ff ffd1 	bl	80005b0 <__NVIC_DisableIRQ>
	HAL_GPIO_WritePin(PIR1_VCC_GPIO_Port, PIR1_VCC_Pin, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f000 ffd1 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIR2_VCC_GPIO_Port, PIR2_VCC_Pin, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 ffca 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 ffc4 	bl	80015bc <HAL_GPIO_WritePin>

    /* Reset score */
    player_one.score = 0;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <game_init+0x8c>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    player_two.score = 0;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <game_init+0x90>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Setting up players' name */
    strcpy(player_one.name, player_one_name);
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <game_init+0x8c>)
 8000648:	f003 fd72 	bl	8004130 <strcpy>
    strcpy(player_two.name, player_two_name);
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <game_init+0x90>)
 8000650:	f003 fd6e 	bl	8004130 <strcpy>

    /* Enable IRQN - game starts now*/
	HAL_GPIO_WritePin(PIR1_VCC_GPIO_Port, PIR1_VCC_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2102      	movs	r1, #2
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f000 ffae 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIR2_VCC_GPIO_Port, PIR2_VCC_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f000 ffa7 	bl	80015bc <HAL_GPIO_WritePin>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800066e:	2006      	movs	r0, #6
 8000670:	f7ff ff80 	bl	8000574 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000674:	2007      	movs	r0, #7
 8000676:	f7ff ff7d 	bl	8000574 <__NVIC_EnableIRQ>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000008 	.word	0x20000008
 8000688:	2000008c 	.word	0x2000008c

0800068c <end_game>:

void end_game()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(EXTI0_IRQn);
 8000690:	2006      	movs	r0, #6
 8000692:	f7ff ff8d 	bl	80005b0 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(EXTI1_IRQn);
 8000696:	2007      	movs	r0, #7
 8000698:	f7ff ff8a 	bl	80005b0 <__NVIC_DisableIRQ>
	HAL_GPIO_WritePin(PIR1_VCC_GPIO_Port, PIR1_VCC_Pin, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 ff8a 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIR2_VCC_GPIO_Port, PIR2_VCC_Pin, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f000 ff83 	bl	80015bc <HAL_GPIO_WritePin>
    player_one.score = 0;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <end_game+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    player_two.score = 0;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <end_game+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f000 ff75 	bl	80015bc <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b49      	ldr	r3, [pc, #292]	; (800081c <MX_GPIO_Init+0x13c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a48      	ldr	r2, [pc, #288]	; (800081c <MX_GPIO_Init+0x13c>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <MX_GPIO_Init+0x13c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b43      	ldr	r3, [pc, #268]	; (800081c <MX_GPIO_Init+0x13c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a42      	ldr	r2, [pc, #264]	; (800081c <MX_GPIO_Init+0x13c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <MX_GPIO_Init+0x13c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <MX_GPIO_Init+0x13c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a3c      	ldr	r2, [pc, #240]	; (800081c <MX_GPIO_Init+0x13c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <MX_GPIO_Init+0x13c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIR1_VCC_Pin|PIR_OUT_1_Pin|PIR_OUT_2_Pin|BUZZER_Pin
 800073e:	2200      	movs	r2, #0
 8000740:	f640 017a 	movw	r1, #2170	; 0x87a
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 ff38 	bl	80015bc <HAL_GPIO_WritePin>
                          |BABA_JAGA_PATRZY_Pin|PIR2_VCC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	4833      	ldr	r0, [pc, #204]	; (8000820 <MX_GPIO_Init+0x140>)
 8000752:	f000 ff33 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = PIR1_VCC_Pin|PIR_OUT_1_Pin|PIR_OUT_2_Pin|BUZZER_Pin
 8000756:	f640 037a 	movw	r3, #2170	; 0x87a
 800075a:	60fb      	str	r3, [r7, #12]
                          |BABA_JAGA_PATRZY_Pin|PIR2_VCC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fdb9 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000776:	2304      	movs	r3, #4
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000786:	2307      	movs	r3, #7
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fda8 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PIR_SIG_1_Pin|PIR_SIG_2_Pin;
 8000798:	2303      	movs	r3, #3
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_GPIO_Init+0x140>)
 80007ae:	f000 fd9b 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80007c4:	2303      	movs	r3, #3
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 fd89 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007d6:	2308      	movs	r3, #8
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_GPIO_Init+0x140>)
 80007ee:	f000 fd7b 	bl	80012e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2006      	movs	r0, #6
 80007f8:	f000 fcc1 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fc:	2006      	movs	r0, #6
 80007fe:	f000 fcda 	bl	80011b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2007      	movs	r0, #7
 8000808:	f000 fcb9 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800080c:	2007      	movs	r0, #7
 800080e:	f000 fcd2 	bl	80011b6 <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
	/* Handling player no 1 movement detected */
	if (GPIO_Pin == PIR_SIG_1_Pin)
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d104      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		/* Blink red diode */
		player_two.score = 1;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_GPIO_EXTI_Callback+0x34>)
 8000836:	2201      	movs	r2, #1
 8000838:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	else if (GPIO_Pin == PIR_SIG_2_Pin)
	{
		/* Blink yellow diode */
		player_one.score = 1;
	}
}
 800083c:	e006      	b.n	800084c <HAL_GPIO_EXTI_Callback+0x28>
	else if (GPIO_Pin == PIR_SIG_2_Pin)
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d103      	bne.n	800084c <HAL_GPIO_EXTI_Callback+0x28>
		player_one.score = 1;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_GPIO_EXTI_Callback+0x38>)
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	2000008c 	.word	0x2000008c
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_EnableIRQ>:
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4907      	ldr	r1, [pc, #28]	; (8000898 <__NVIC_EnableIRQ+0x38>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_DisableIRQ>:
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db12      	blt.n	80008d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 021f 	and.w	r2, r3, #31
 80008b4:	490a      	ldr	r1, [pc, #40]	; (80008e0 <__NVIC_DisableIRQ+0x44>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f202 	lsl.w	r2, r0, r2
 80008c2:	3320      	adds	r3, #32
 80008c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c8:	f3bf 8f4f 	dsb	sy
}
 80008cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ce:	f3bf 8f6f 	isb	sy
}
 80008d2:	bf00      	nop
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008ea:	af00      	add	r7, sp, #0
  /* TODO */
  /* Here we should anchor some mechanism to get configuration from bluetooth */

  /* TODO */
  /* For now names gonna be static - will see if we wanna send it through bluetooth */
  char debug_name_1[BUFFOR_MAX_SIZE] = {"Pawel"};
 80008ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008f0:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80008f4:	4965      	ldr	r1, [pc, #404]	; (8000a8c <main+0x1a8>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	c903      	ldmia	r1, {r0, r1}
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	3304      	adds	r3, #4
 80008fe:	8019      	strh	r1, [r3, #0]
 8000900:	1d93      	adds	r3, r2, #6
 8000902:	227a      	movs	r2, #122	; 0x7a
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fbea 	bl	80040e0 <memset>
  char debug_name_2[BUFFOR_MAX_SIZE] = {"Mariusz"};
 800090c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000910:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000914:	495e      	ldr	r1, [pc, #376]	; (8000a90 <main+0x1ac>)
 8000916:	461a      	mov	r2, r3
 8000918:	c903      	ldmia	r1, {r0, r1}
 800091a:	e882 0003 	stmia.w	r2, {r0, r1}
 800091e:	3308      	adds	r3, #8
 8000920:	2278      	movs	r2, #120	; 0x78
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fbdb 	bl	80040e0 <memset>
  strcpy(player_one_name, debug_name_1);
 800092a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800092e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f003 fbfb 	bl	8004130 <strcpy>
  strcpy(player_two_name, debug_name_2);
 800093a:	463a      	mov	r2, r7
 800093c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fbf4 	bl	8004130 <strcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f000 fac9 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f8ae 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff fec6 	bl	80006e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000954:	f000 fa0a 	bl	8000d6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &rx, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	494e      	ldr	r1, [pc, #312]	; (8000a94 <main+0x1b0>)
 800095c:	484e      	ldr	r0, [pc, #312]	; (8000a98 <main+0x1b4>)
 800095e:	f002 f8d7 	bl	8002b10 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (message)
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <main+0x1b8>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3b62      	subs	r3, #98	; 0x62
 8000968:	2b03      	cmp	r3, #3
 800096a:	d863      	bhi.n	8000a34 <main+0x150>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <main+0x90>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000985 	.word	0x08000985
 8000978:	080009a9 	.word	0x080009a9
 800097c:	080009b5 	.word	0x080009b5
 8000980:	080009f5 	.word	0x080009f5
	  {
	  case START:
		  game_init(player_one_name, player_two_name);
 8000984:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000988:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe32 	bl	80005f8 <game_init>
		  players_movement_allowed = 1;
 8000994:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <main+0x1bc>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
		  message = 0x00;
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <main+0x1b8>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
		  message = BABA_JAGA_NIE_PATRZY;
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <main+0x1b8>)
 80009a2:	2265      	movs	r2, #101	; 0x65
 80009a4:	701a      	strb	r2, [r3, #0]
		  break;
 80009a6:	e046      	b.n	8000a36 <main+0x152>
	  case STOP:
		  end_game();
 80009a8:	f7ff fe70 	bl	800068c <end_game>
		  message = 0x00;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <main+0x1b8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
		  break;
 80009b2:	e040      	b.n	8000a36 <main+0x152>
	  case BABA_JAGA_PATRZY:
		  HAL_GPIO_WritePin(PIR1_VCC_GPIO_Port, PIR1_VCC_Pin, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2102      	movs	r1, #2
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 fdfe 	bl	80015bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PIR2_VCC_GPIO_Port, PIR2_VCC_Pin, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f000 fdf7 	bl	80015bc <HAL_GPIO_WritePin>
		  NVIC_EnableIRQ(EXTI0_IRQn);
 80009ce:	2006      	movs	r0, #6
 80009d0:	f7ff ff46 	bl	8000860 <__NVIC_EnableIRQ>
		  NVIC_EnableIRQ(EXTI1_IRQn);
 80009d4:	2007      	movs	r0, #7
 80009d6:	f7ff ff43 	bl	8000860 <__NVIC_EnableIRQ>
		  HAL_GPIO_WritePin(BABA_JAGA_PATRZY_GPIO_Port, BABA_JAGA_PATRZY_Pin, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fdeb 	bl	80015bc <HAL_GPIO_WritePin>
		  players_movement_allowed = 0;
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <main+0x1bc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
		  message = 0x00;
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <main+0x1b8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		  break;
 80009f2:	e020      	b.n	8000a36 <main+0x152>
	  case BABA_JAGA_NIE_PATRZY:
		  HAL_GPIO_WritePin(PIR1_VCC_GPIO_Port, PIR1_VCC_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 fdde 	bl	80015bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PIR2_VCC_GPIO_Port, PIR2_VCC_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 fdd7 	bl	80015bc <HAL_GPIO_WritePin>
		  NVIC_DisableIRQ(EXTI0_IRQn);
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f7ff ff44 	bl	800089c <__NVIC_DisableIRQ>
		  NVIC_DisableIRQ(EXTI1_IRQn);
 8000a14:	2007      	movs	r0, #7
 8000a16:	f7ff ff41 	bl	800089c <__NVIC_DisableIRQ>
		  HAL_GPIO_WritePin(BABA_JAGA_PATRZY_GPIO_Port, BABA_JAGA_PATRZY_Pin, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	; 0x40
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f000 fdcb 	bl	80015bc <HAL_GPIO_WritePin>
		  players_movement_allowed = 1;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <main+0x1bc>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
		  message = 0x00;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <main+0x1b8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
		  break;
 8000a32:	e000      	b.n	8000a36 <main+0x152>
	  default: ;
		  break;
 8000a34:	bf00      	nop
	  }
	  if (players_movement_allowed == 0)
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <main+0x1bc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d191      	bne.n	8000962 <main+0x7e>
	  {
		  if (player_one.score == 1)
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <main+0x1c0>)
 8000a40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00d      	beq.n	8000a64 <main+0x180>
		  {
			  // Player 1 wins
			  HAL_GPIO_TogglePin(PIR_OUT_1_GPIO_Port, PIR_OUT_1_Pin);
 8000a48:	2108      	movs	r1, #8
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fdcd 	bl	80015ec <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fdaf 	bl	80015bc <HAL_GPIO_WritePin>
			  end_game();
 8000a5e:	f7ff fe15 	bl	800068c <end_game>
 8000a62:	e77e      	b.n	8000962 <main+0x7e>
			 }
		  else if (player_two.score == 1)
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <main+0x1c4>)
 8000a66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f43f af79 	beq.w	8000962 <main+0x7e>
		  {
			  // Player 2 wins
			  HAL_GPIO_TogglePin(PIR_OUT_2_GPIO_Port, PIR_OUT_2_Pin);
 8000a70:	2110      	movs	r1, #16
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f000 fdb9 	bl	80015ec <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f000 fd9b 	bl	80015bc <HAL_GPIO_WritePin>
			  end_game();
 8000a86:	f7ff fe01 	bl	800068c <end_game>
	  switch (message)
 8000a8a:	e76a      	b.n	8000962 <main+0x7e>
 8000a8c:	080049f4 	.word	0x080049f4
 8000a90:	08004a74 	.word	0x08004a74
 8000a94:	2000019c 	.word	0x2000019c
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	2000008c 	.word	0x2000008c

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fb10 	bl	80040e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad2:	f000 fddb 	bl	800168c <HAL_PWREx_ControlVoltageScaling>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000adc:	f000 f892 	bl	8000c04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ae0:	f000 fdb6 	bl	8001650 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <SystemClock_Config+0xc0>)
 8000ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <SystemClock_Config+0xc0>)
 8000aec:	f023 0318 	bic.w	r3, r3, #24
 8000af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000af4:	2314      	movs	r3, #20
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b04:	2360      	movs	r3, #96	; 0x60
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b14:	2328      	movs	r3, #40	; 0x28
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fe05 	bl	8001738 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f866 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fa05 	bl	8001f60 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b5c:	f000 f852 	bl	8000c04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b60:	f001 fe18 	bl	8002794 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b64:	bf00      	nop
 8000b66:	3758      	adds	r7, #88	; 0x58
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <HAL_UART_RxCpltCallback+0x64>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d124      	bne.n	8000bcc <HAL_UART_RxCpltCallback+0x5c>
	{
		if (rx == 'e')
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b65      	cmp	r3, #101	; 0x65
 8000b88:	d109      	bne.n	8000b9e <HAL_UART_RxCpltCallback+0x2e>
		{
			sprintf(debug_message, "Received e");
 8000b8a:	4914      	ldr	r1, [pc, #80]	; (8000bdc <HAL_UART_RxCpltCallback+0x6c>)
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <HAL_UART_RxCpltCallback+0x70>)
 8000b8e:	f003 faaf 	bl	80040f0 <siprintf>
			HAL_GPIO_TogglePin(BABA_JAGA_PATRZY_GPIO_Port, BABA_JAGA_PATRZY_Pin);
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 fd28 	bl	80015ec <HAL_GPIO_TogglePin>
 8000b9c:	e00c      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x48>
		}
		else if (rx == 0)
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d104      	bne.n	8000bb0 <HAL_UART_RxCpltCallback+0x40>
		{
			sprintf(debug_message, "Received 00000");
 8000ba6:	490f      	ldr	r1, [pc, #60]	; (8000be4 <HAL_UART_RxCpltCallback+0x74>)
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <HAL_UART_RxCpltCallback+0x70>)
 8000baa:	f003 faa1 	bl	80040f0 <siprintf>
 8000bae:	e003      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x48>
		}
		else
		{
			sprintf(debug_message, "Received sth else");
 8000bb0:	490d      	ldr	r1, [pc, #52]	; (8000be8 <HAL_UART_RxCpltCallback+0x78>)
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <HAL_UART_RxCpltCallback+0x70>)
 8000bb4:	f003 fa9c 	bl	80040f0 <siprintf>
		}
	HAL_UART_Receive_IT(&huart1, &rx, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <HAL_UART_RxCpltCallback+0x7c>)
 8000bbe:	f001 ffa7 	bl	8002b10 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart1, debug_message, 15);
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <HAL_UART_RxCpltCallback+0x70>)
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_UART_RxCpltCallback+0x7c>)
 8000bc8:	f001 ff34 	bl	8002a34 <HAL_UART_Transmit_IT>
	}

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	2000019c 	.word	0x2000019c
 8000bdc:	08004af4 	.word	0x08004af4
 8000be0:	200001a0 	.word	0x200001a0
 8000be4:	08004b00 	.word	0x08004b00
 8000be8:	08004b10 	.word	0x08004b10
 8000bec:	200001b4 	.word	0x200001b4

08000bf0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f970 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_SIG_1_Pin);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fcb5 	bl	8001620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_SIG_2_Pin);
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f000 fcae 	bl	8001620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USART1_IRQHandler+0x10>)
 8000cce:	f001 ff75 	bl	8002bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001b4 	.word	0x200001b4

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f003 f9be 	bl	800408c <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20010000 	.word	0x20010000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200001b0 	.word	0x200001b0
 8000d44:	20000250 	.word	0x20000250

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f001 fdf2 	bl	8002998 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f7ff ff23 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001b4 	.word	0x200001b4
 8000dc8:	40013800 	.word	0x40013800

08000dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09e      	sub	sp, #120	; 0x78
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	2254      	movs	r2, #84	; 0x54
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 f977 	bl	80040e0 <memset>
  if(uartHandle->Instance==USART1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_UART_MspInit+0xb4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d13d      	bne.n	8000e78 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 facd 	bl	80023a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e14:	f7ff fef6 	bl	8000c04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	6613      	str	r3, [r2, #96]	; 0x60
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e48:	23c0      	movs	r3, #192	; 0xc0
 8000e4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e60:	4619      	mov	r1, r3
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e64:	f000 fa40 	bl	80012e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2025      	movs	r0, #37	; 0x25
 8000e6e:	f000 f986 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e72:	2025      	movs	r0, #37	; 0x25
 8000e74:	f000 f99f 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3778      	adds	r7, #120	; 0x78
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff ff5a 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f003 f8ed 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ebe:	f7ff fd11 	bl	80008e4 <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ed0:	08004bb0 	.word	0x08004bb0
  ldr r2, =_sbss
 8000ed4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ed8:	2000024c 	.word	0x2000024c

08000edc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_IRQHandler>

08000ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f93d 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f80e 	bl	8000f10 <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	e001      	b.n	8000f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f00:	f7ff fe86 	bl	8000c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_InitTick+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_InitTick+0x70>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f949 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d809      	bhi.n	8000f60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f913 	bl	800117e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_InitTick+0x74>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e004      	b.n	8000f70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e001      	b.n	8000f70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000118 	.word	0x20000118
 8000f80:	20000110 	.word	0x20000110
 8000f84:	20000114 	.word	0x20000114

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000118 	.word	0x20000118
 8000fac:	20000238 	.word	0x20000238

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000238 	.word	0x20000238

08000fc8 <__NVIC_SetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff3e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff31 	bl	800102c <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2204      	movs	r2, #4
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e022      	b.n	800125a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 020e 	bic.w	r2, r2, #14
 8001222:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	f003 021c 	and.w	r2, r3, #28
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d005      	beq.n	800128a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2204      	movs	r2, #4
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e029      	b.n	80012de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 020e 	bic.w	r2, r2, #14
 8001298:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f003 021c 	and.w	r2, r3, #28
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	4798      	blx	r3
    }
  }
  return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e148      	b.n	800158a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 813a 	beq.w	8001584 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0203 	and.w	r2, r3, #3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8094 	beq.w	8001584 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x2c0>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x2c0>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6613      	str	r3, [r2, #96]	; 0x60
 8001468:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <HAL_GPIO_Init+0x2c0>)
 800146a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_GPIO_Init+0x2c4>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800149e:	d00d      	beq.n	80014bc <HAL_GPIO_Init+0x1d4>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a43      	ldr	r2, [pc, #268]	; (80015b0 <HAL_GPIO_Init+0x2c8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1d0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a42      	ldr	r2, [pc, #264]	; (80015b4 <HAL_GPIO_Init+0x2cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_GPIO_Init+0x1cc>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b4:	2307      	movs	r3, #7
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014bc:	2300      	movs	r3, #0
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ce:	4937      	ldr	r1, [pc, #220]	; (80015ac <HAL_GPIO_Init+0x2c4>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	f47f aeaf 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43d9      	mvns	r1, r3
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	400b      	ands	r3, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f8f0 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_PWREx_GetVoltageRange+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000

0800168c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169a:	d130      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a8:	d038      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2232      	movs	r2, #50	; 0x32
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	e002      	b.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e4:	d102      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f2      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d110      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e00f      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d007      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000
 8001730:	20000110 	.word	0x20000110
 8001734:	431bde83 	.word	0x431bde83

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f000 bc02 	b.w	8001f50 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174c:	4b96      	ldr	r3, [pc, #600]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001756:	4b94      	ldr	r3, [pc, #592]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80e4 	beq.w	8001936 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_RCC_OscConfig+0x4c>
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	f040 808b 	bne.w	8001892 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b01      	cmp	r3, #1
 8001780:	f040 8087 	bne.w	8001892 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x64>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e3d9      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_RCC_OscConfig+0x7e>
 80017ac:	4b7e      	ldr	r3, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	e005      	b.n	80017c2 <HAL_RCC_OscConfig+0x8a>
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d223      	bcs.n	800180e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fd8c 	bl	80022e8 <RCC_SetFlashLatencyFromMSIRange>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e3ba      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017da:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a72      	ldr	r2, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	496d      	ldr	r1, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f8:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	4968      	ldr	r1, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e025      	b.n	800185a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180e:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4960      	ldr	r1, [pc, #384]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182c:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	495b      	ldr	r1, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fd4c 	bl	80022e8 <RCC_SetFlashLatencyFromMSIRange>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e37a      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185a:	f000 fc81 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	4950      	ldr	r1, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x274>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_RCC_OscConfig+0x278>)
 8001878:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800187a:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <HAL_RCC_OscConfig+0x27c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb46 	bl	8000f10 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d052      	beq.n	8001934 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	e35e      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d032      	beq.n	8001900 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb83 	bl	8000fb0 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb7f 	bl	8000fb0 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e347      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4930      	ldr	r1, [pc, #192]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	492b      	ldr	r1, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
 80018fe:	e01a      	b.n	8001936 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190c:	f7ff fb50 	bl	8000fb0 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001914:	f7ff fb4c 	bl	8000fb0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e314      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1dc>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d073      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x21c>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d10e      	bne.n	800196c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d063      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d15f      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e2f1      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x24c>
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e025      	b.n	80019d0 <HAL_RCC_OscConfig+0x298>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d114      	bne.n	80019b8 <HAL_RCC_OscConfig+0x280>
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a02      	ldr	r2, [pc, #8]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e013      	b.n	80019d0 <HAL_RCC_OscConfig+0x298>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08004b24 	.word	0x08004b24
 80019b0:	20000110 	.word	0x20000110
 80019b4:	20000114 	.word	0x20000114
 80019b8:	4ba0      	ldr	r3, [pc, #640]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a9f      	ldr	r2, [pc, #636]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a9c      	ldr	r2, [pc, #624]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff faea 	bl	8000fb0 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fae6 	bl	8000fb0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e2ae      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2a8>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fad6 	bl	8000fb0 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fad2 	bl	8000fb0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e29a      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2d0>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d060      	beq.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_OscConfig+0x310>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d116      	bne.n	8001a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a48:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x328>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e277      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	4973      	ldr	r1, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a74:	e040      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d023      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fa91 	bl	8000fb0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fa8d 	bl	8000fb0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e255      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b62      	ldr	r3, [pc, #392]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	495f      	ldr	r1, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e018      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5c      	ldr	r2, [pc, #368]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa6d 	bl	8000fb0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fa69 	bl	8000fb0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e231      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d03c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa48 	bl	8000fb0 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fa44 	bl	8000fb0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e20c      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ef      	beq.n	8001b24 <HAL_RCC_OscConfig+0x3ec>
 8001b44:	e01b      	b.n	8001b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff fa2b 	bl	8000fb0 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fa27 	bl	8000fb0 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1ef      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80a6 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d118      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f9ee 	bl	8000fb0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd8:	f7ff f9ea 	bl	8000fb0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1b2      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4d8>
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0e:	e029      	b.n	8001c64 <HAL_RCC_OscConfig+0x52c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d115      	bne.n	8001c44 <HAL_RCC_OscConfig+0x50c>
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x52c>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	4b9a      	ldr	r3, [pc, #616]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	4a99      	ldr	r2, [pc, #612]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c54:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a95      	ldr	r2, [pc, #596]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d016      	beq.n	8001c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f9a0 	bl	8000fb0 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff f99c 	bl	8000fb0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e162      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ed      	beq.n	8001c74 <HAL_RCC_OscConfig+0x53c>
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f989 	bl	8000fb0 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f985 	bl	8000fb0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e14b      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ed      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a77      	ldr	r2, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d03c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cec:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf2:	4a6f      	ldr	r2, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f958 	bl	8000fb0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d04:	f7ff f954 	bl	8000fb0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e11c      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d16:	4b66      	ldr	r3, [pc, #408]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ef      	beq.n	8001d04 <HAL_RCC_OscConfig+0x5cc>
 8001d24:	e01b      	b.n	8001d5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d26:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d2c:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7ff f93b 	bl	8000fb0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3e:	f7ff f937 	bl	8000fb0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0ff      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ef      	bne.n	8001d3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80f3 	beq.w	8001f4e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	f040 80c9 	bne.w	8001f04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d72:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0203 	and.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d12c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	3b01      	subs	r3, #1
 8001d92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d123      	bne.n	8001de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d11b      	bne.n	8001de0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d113      	bne.n	8001de0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d109      	bne.n	8001de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d06b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d062      	beq.n	8001eac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0ac      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e02:	f7ff f8d5 	bl	8000fb0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff f8d1 	bl	8000fb0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e099      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_RCC_OscConfig+0x77c>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	4311      	orrs	r1, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e42:	0212      	lsls	r2, r2, #8
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e4a:	0852      	lsrs	r2, r2, #1
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	0552      	lsls	r2, r2, #21
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e56:	0852      	lsrs	r2, r2, #1
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	0652      	lsls	r2, r2, #25
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e62:	06d2      	lsls	r2, r2, #27
 8001e64:	430a      	orrs	r2, r1
 8001e66:	4912      	ldr	r1, [pc, #72]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e84:	f7ff f894 	bl	8000fb0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f890 	bl	8000fb0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e058      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_OscConfig+0x778>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eaa:	e050      	b.n	8001f4e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e04f      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d144      	bne.n	8001f4e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001edc:	f7ff f868 	bl	8000fb0 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f864 	bl	8000fb0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e02c      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x7ac>
 8001f02:	e024      	b.n	8001f4e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d01f      	beq.n	8001f4a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f84b 	bl	8000fb0 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7ff f847 	bl	8000fb0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e00f      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4905      	ldr	r1, [pc, #20]	; (8001f58 <HAL_RCC_OscConfig+0x820>)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x824>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e001      	b.n	8001f4e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	feeefffc 	.word	0xfeeefffc

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0e7      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b75      	ldr	r3, [pc, #468]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d910      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4970      	ldr	r1, [pc, #448]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b6e      	ldr	r3, [pc, #440]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0cf      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d908      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4960      	ldr	r1, [pc, #384]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d04c      	beq.n	8002078 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d121      	bne.n	8002036 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0a6      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffe:	4b54      	ldr	r3, [pc, #336]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e09a      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002016:	4b4e      	ldr	r3, [pc, #312]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e08e      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e086      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4943      	ldr	r1, [pc, #268]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002048:	f7fe ffb2 	bl	8000fb0 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7fe ffae 	bl	8000fb0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e06e      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002090:	429a      	cmp	r2, r3
 8002092:	d208      	bcs.n	80020a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	492b      	ldr	r1, [pc, #172]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d210      	bcs.n	80020d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 0207 	bic.w	r2, r3, #7
 80020bc:	4923      	ldr	r1, [pc, #140]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCC_ClockConfig+0x1ec>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e036      	b.n	8002144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4918      	ldr	r1, [pc, #96]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d009      	beq.n	8002114 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4910      	ldr	r1, [pc, #64]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	4313      	orrs	r3, r2
 8002112:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002114:	f000 f824 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	490b      	ldr	r1, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x1f4>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1f8>)
 8002132:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1fc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fee9 	bl	8000f10 <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	72fb      	strb	r3, [r7, #11]

  return status;
 8002142:	7afb      	ldrb	r3, [r7, #11]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
 8002154:	08004b24 	.word	0x08004b24
 8002158:	20000110 	.word	0x20000110
 800215c:	20000114 	.word	0x20000114

08002160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x34>
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d11e      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021a0:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e005      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <HAL_RCC_GetSysClockFreq+0x10c>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d102      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_GetSysClockFreq+0x110>)
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e004      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_RCC_GetSysClockFreq+0x114>)
 80021e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d134      	bne.n	8002258 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0xa6>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d003      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0xac>
 8002204:	e005      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCC_GetSysClockFreq+0x110>)
 8002208:	617b      	str	r3, [r7, #20]
      break;
 800220a:	e005      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_GetSysClockFreq+0x114>)
 800220e:	617b      	str	r3, [r7, #20]
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	617b      	str	r3, [r7, #20]
      break;
 8002216:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	3301      	adds	r3, #1
 8002224:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	fb03 f202 	mul.w	r2, r3, r2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	0e5b      	lsrs	r3, r3, #25
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	3301      	adds	r3, #1
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002258:	69bb      	ldr	r3, [r7, #24]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	08004b3c 	.word	0x08004b3c
 8002270:	00f42400 	.word	0x00f42400
 8002274:	007a1200 	.word	0x007a1200

08002278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCC_GetHCLKFreq+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000110 	.word	0x20000110

08002290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002294:	f7ff fff0 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4904      	ldr	r1, [pc, #16]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08004b34 	.word	0x08004b34

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022c0:	f7ff ffda 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08004b34 	.word	0x08004b34

080022e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002300:	f7ff f9b6 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002304:	6178      	str	r0, [r7, #20]
 8002306:	e014      	b.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002320:	f7ff f9a6 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002338:	d10b      	bne.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d919      	bls.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2ba0      	cmp	r3, #160	; 0xa0
 8002344:	d902      	bls.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e013      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800234c:	2301      	movs	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e010      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d902      	bls.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002358:	2303      	movs	r3, #3
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e00a      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d102      	bne.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e004      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b70      	cmp	r3, #112	; 0x70
 800236e:	d101      	bne.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 0207 	bic.w	r2, r3, #7
 800237c:	4909      	ldr	r1, [pc, #36]	; (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d001      	beq.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b0:	2300      	movs	r3, #0
 80023b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023b4:	2300      	movs	r3, #0
 80023b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d031      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023cc:	d01a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023d2:	d814      	bhi.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023dc:	d10f      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a5c      	ldr	r2, [pc, #368]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ea:	e00c      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f9de 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023fc:	e003      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	74fb      	strb	r3, [r7, #19]
      break;
 8002402:	e000      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800240c:	4b51      	ldr	r3, [pc, #324]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	494e      	ldr	r1, [pc, #312]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002422:	e001      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 809e 	beq.w	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002468:	2301      	movs	r3, #1
 800246a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246c:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a39      	ldr	r2, [pc, #228]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002478:	f7fe fd9a 	bl	8000fb0 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800247e:	e009      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe fd96 	bl	8000fb0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d902      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	74fb      	strb	r3, [r7, #19]
        break;
 8002492:	e005      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ef      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d15a      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01e      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d019      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ee:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d016      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fd56 	bl	8000fb0 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002506:	e00b      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe fd52 	bl	8000fb0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d902      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	74fb      	strb	r3, [r7, #19]
            break;
 800251e:	e006      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ec      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800254a:	e009      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
 8002550:	e006      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002560:	7c7b      	ldrb	r3, [r7, #17]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b8a      	ldr	r3, [pc, #552]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a89      	ldr	r2, [pc, #548]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800257e:	4b84      	ldr	r3, [pc, #528]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f023 0203 	bic.w	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4980      	ldr	r1, [pc, #512]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a0:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 020c 	bic.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	4978      	ldr	r1, [pc, #480]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	496f      	ldr	r1, [pc, #444]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	4967      	ldr	r1, [pc, #412]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002606:	4b62      	ldr	r3, [pc, #392]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	495e      	ldr	r1, [pc, #376]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	4956      	ldr	r1, [pc, #344]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d028      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4945      	ldr	r1, [pc, #276]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d106      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b40      	ldr	r3, [pc, #256]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e011      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a2:	d10c      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f882 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d028      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	492d      	ldr	r1, [pc, #180]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a28      	ldr	r2, [pc, #160]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	e011      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f853 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002746:	d10c      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	2102      	movs	r1, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f830 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	4904      	ldr	r1, [pc, #16]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002784:	7cbb      	ldrb	r3, [r7, #18]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000

080027b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027c2:	4b74      	ldr	r3, [pc, #464]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d018      	beq.n	8002800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ce:	4b71      	ldr	r3, [pc, #452]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d10d      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
       ||
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027e6:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
       ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d047      	beq.n	800288a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e044      	b.n	800288a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d018      	beq.n	800283a <RCCEx_PLLSAI1_Config+0x86>
 8002808:	2b03      	cmp	r3, #3
 800280a:	d825      	bhi.n	8002858 <RCCEx_PLLSAI1_Config+0xa4>
 800280c:	2b01      	cmp	r3, #1
 800280e:	d002      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x62>
 8002810:	2b02      	cmp	r3, #2
 8002812:	d009      	beq.n	8002828 <RCCEx_PLLSAI1_Config+0x74>
 8002814:	e020      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002816:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11d      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002826:	e01a      	b.n	800285e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d116      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e013      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800283a:	4b56      	ldr	r3, [pc, #344]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002846:	4b53      	ldr	r3, [pc, #332]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002856:	e006      	b.n	8002866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e004      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002866:	bf00      	nop
    }

    if(status == HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800286e:	4b49      	ldr	r3, [pc, #292]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	430b      	orrs	r3, r1
 8002884:	4943      	ldr	r1, [pc, #268]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d17c      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002890:	4b40      	ldr	r3, [pc, #256]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a3f      	ldr	r2, [pc, #252]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800289a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fb88 	bl	8000fb0 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028a2:	e009      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a4:	f7fe fb84 	bl	8000fb0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d902      	bls.n	80028b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
        break;
 80028b6:	e005      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ef      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d15f      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d110      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	06d2      	lsls	r2, r2, #27
 80028e8:	430a      	orrs	r2, r1
 80028ea:	492a      	ldr	r1, [pc, #168]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	610b      	str	r3, [r1, #16]
 80028f0:	e027      	b.n	8002942 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d112      	bne.n	800291e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	0211      	lsls	r1, r2, #8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6912      	ldr	r2, [r2, #16]
 800290e:	0852      	lsrs	r2, r2, #1
 8002910:	3a01      	subs	r2, #1
 8002912:	0552      	lsls	r2, r2, #21
 8002914:	430a      	orrs	r2, r1
 8002916:	491f      	ldr	r1, [pc, #124]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	610b      	str	r3, [r1, #16]
 800291c:	e011      	b.n	8002942 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002926:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	0211      	lsls	r1, r2, #8
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6952      	ldr	r2, [r2, #20]
 8002934:	0852      	lsrs	r2, r2, #1
 8002936:	3a01      	subs	r2, #1
 8002938:	0652      	lsls	r2, r2, #25
 800293a:	430a      	orrs	r2, r1
 800293c:	4915      	ldr	r1, [pc, #84]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800294c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe fb2f 	bl	8000fb0 <HAL_GetTick>
 8002952:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002954:	e009      	b.n	800296a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002956:	f7fe fb2b 	bl	8000fb0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	73fb      	strb	r3, [r7, #15]
          break;
 8002968:	e005      	b.n	8002976 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ef      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e040      	b.n	8002a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fa06 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fbe8 	bl	80031ac <UART_SetConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fe08 	bl	8003604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fe8f 	bl	8003748 <UART_CheckIdleState>
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b08b      	sub	sp, #44	; 0x2c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d156      	bne.n	8002af8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_Transmit_IT+0x22>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e04f      	b.n	8002afa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Transmit_IT+0x34>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e048      	b.n	8002afa <HAL_UART_Transmit_IT+0xc6>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	88fa      	ldrh	r2, [r7, #6]
 8002a82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d107      	bne.n	8002ab4 <HAL_UART_Transmit_IT+0x80>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_UART_Transmit_IT+0xd4>)
 8002ab0:	669a      	str	r2, [r3, #104]	; 0x68
 8002ab2:	e002      	b.n	8002aba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_UART_Transmit_IT+0xd8>)
 8002ab8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	e853 3f00 	ldrex	r3, [r3]
 8002ace:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae4:	69f9      	ldr	r1, [r7, #28]
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	e841 2300 	strex	r3, r2, [r1]
 8002aec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e6      	bne.n	8002ac2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	372c      	adds	r7, #44	; 0x2c
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	08003ca3 	.word	0x08003ca3
 8002b0c:	08003beb 	.word	0x08003beb

08002b10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d142      	bne.n	8002bac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_UART_Receive_IT+0x22>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e03b      	b.n	8002bae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_UART_Receive_IT+0x34>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e034      	b.n	8002bae <HAL_UART_Receive_IT+0x9e>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_UART_Receive_IT+0xa8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01f      	beq.n	8002b9c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d018      	beq.n	8002b9c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	613b      	str	r3, [r7, #16]
   return(result);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69f9      	ldr	r1, [r7, #28]
 8002b8e:	6a3a      	ldr	r2, [r7, #32]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e6      	bne.n	8002b6a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fede 	bl	8003964 <UART_Start_Receive_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	e000      	b.n	8002bae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3728      	adds	r7, #40	; 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40008000 	.word	0x40008000

08002bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0ba      	sub	sp, #232	; 0xe8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002be2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002be6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bea:	4013      	ands	r3, r2
 8002bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d115      	bne.n	8002c24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00f      	beq.n	8002c24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 82a6 	beq.w	8003166 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      }
      return;
 8002c22:	e2a0      	b.n	8003166 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8117 	beq.w	8002e5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_UART_IRQHandler+0x298>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 810a 	beq.w	8002e5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d011      	beq.n	8002c78 <HAL_UART_IRQHandler+0xbc>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d011      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xec>
 8002c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2202      	movs	r2, #2
 8002c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d011      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x11c>
 8002cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_UART_IRQHandler+0x18a>
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 820c 	beq.w	800316a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d005      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04f      	beq.n	8002e3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 feaa 	bl	8003af8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d141      	bne.n	8002e36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3308      	adds	r3, #8
 8002db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1d9      	bne.n	8002db2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_UART_IRQHandler+0x29c>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fa27 	bl	8001266 <HAL_DMA_Abort_IT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00f      	b.n	8002e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9a6 	bl	8003180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e00b      	b.n	8002e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9a2 	bl	8003180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	e007      	b.n	8002e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f99e 	bl	8003180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e4c:	e18d      	b.n	800316a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4e:	bf00      	nop
    return;
 8002e50:	e18b      	b.n	800316a <HAL_UART_IRQHandler+0x5ae>
 8002e52:	bf00      	nop
 8002e54:	04000120 	.word	0x04000120
 8002e58:	08003bbf 	.word	0x08003bbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 8146 	bne.w	80030f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 813f 	beq.w	80030f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8138 	beq.w	80030f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	f040 80b4 	bne.w	8003002 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 815f 	beq.w	800316e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	f080 8157 	bcs.w	800316e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 8085 	bne.w	8002fe6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1da      	bne.n	8002edc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3308      	adds	r3, #8
 8002f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e1      	bne.n	8002f26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e3      	bne.n	8002f62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb6:	f023 0310 	bic.w	r3, r3, #16
 8002fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e4      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe f902 	bl	80011ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8ca 	bl	8003194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003000:	e0b5      	b.n	800316e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800300e:	b29b      	uxth	r3, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a7 	beq.w	8003172 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a2 	beq.w	8003172 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
 8003052:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e4      	bne.n	800302e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3308      	adds	r3, #8
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	623b      	str	r3, [r7, #32]
   return(result);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3308      	adds	r3, #8
 8003084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003088:	633a      	str	r2, [r7, #48]	; 0x30
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800308e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e3      	bne.n	8003064 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0310 	bic.w	r3, r3, #16
 80030c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69b9      	ldr	r1, [r7, #24]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	617b      	str	r3, [r7, #20]
   return(result);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e4      	bne.n	80030ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f852 	bl	8003194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030f0:	e03f      	b.n	8003172 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <HAL_UART_IRQHandler+0x560>
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 ffae 	bl	8004076 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800311a:	e02d      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800311c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
    }
    return;
 8003144:	e017      	b.n	8003176 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <HAL_UART_IRQHandler+0x5bc>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fdff 	bl	8003d62 <UART_EndTransmit_IT>
    return;
 8003164:	e008      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003166:	bf00      	nop
 8003168:	e006      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
    return;
 800316a:	bf00      	nop
 800316c:	e004      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
      return;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003176:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003178:	37e8      	adds	r7, #232	; 0xe8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop

08003180 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b0:	b08a      	sub	sp, #40	; 0x28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4bb4      	ldr	r3, [pc, #720]	; (80034ac <UART_SetConfig+0x300>)
 80031dc:	4013      	ands	r3, r2
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4aa9      	ldr	r2, [pc, #676]	; (80034b0 <UART_SetConfig+0x304>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	4313      	orrs	r3, r2
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4aa0      	ldr	r2, [pc, #640]	; (80034b4 <UART_SetConfig+0x308>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d126      	bne.n	8003284 <UART_SetConfig+0xd8>
 8003236:	4ba0      	ldr	r3, [pc, #640]	; (80034b8 <UART_SetConfig+0x30c>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b03      	cmp	r3, #3
 8003242:	d81b      	bhi.n	800327c <UART_SetConfig+0xd0>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <UART_SetConfig+0xa0>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	0800325d 	.word	0x0800325d
 8003250:	0800326d 	.word	0x0800326d
 8003254:	08003265 	.word	0x08003265
 8003258:	08003275 	.word	0x08003275
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e080      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e07c      	b.n	8003366 <UART_SetConfig+0x1ba>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e078      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e074      	b.n	8003366 <UART_SetConfig+0x1ba>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e070      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a8c      	ldr	r2, [pc, #560]	; (80034bc <UART_SetConfig+0x310>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d138      	bne.n	8003300 <UART_SetConfig+0x154>
 800328e:	4b8a      	ldr	r3, [pc, #552]	; (80034b8 <UART_SetConfig+0x30c>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d82d      	bhi.n	80032f8 <UART_SetConfig+0x14c>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0xf8>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080032f9 	.word	0x080032f9
 80032ac:	080032f9 	.word	0x080032f9
 80032b0:	080032f9 	.word	0x080032f9
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080032f9 	.word	0x080032f9
 80032bc:	080032f9 	.word	0x080032f9
 80032c0:	080032f9 	.word	0x080032f9
 80032c4:	080032e1 	.word	0x080032e1
 80032c8:	080032f9 	.word	0x080032f9
 80032cc:	080032f9 	.word	0x080032f9
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	080032f1 	.word	0x080032f1
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e042      	b.n	8003366 <UART_SetConfig+0x1ba>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e03e      	b.n	8003366 <UART_SetConfig+0x1ba>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ee:	e03a      	b.n	8003366 <UART_SetConfig+0x1ba>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f6:	e036      	b.n	8003366 <UART_SetConfig+0x1ba>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e032      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <UART_SetConfig+0x304>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d12a      	bne.n	8003360 <UART_SetConfig+0x1b4>
 800330a:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <UART_SetConfig+0x30c>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003318:	d01a      	beq.n	8003350 <UART_SetConfig+0x1a4>
 800331a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800331e:	d81b      	bhi.n	8003358 <UART_SetConfig+0x1ac>
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003324:	d00c      	beq.n	8003340 <UART_SetConfig+0x194>
 8003326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332a:	d815      	bhi.n	8003358 <UART_SetConfig+0x1ac>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <UART_SetConfig+0x18c>
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003334:	d008      	beq.n	8003348 <UART_SetConfig+0x19c>
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x1ac>
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e012      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e00e      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e00a      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e006      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e002      	b.n	8003366 <UART_SetConfig+0x1ba>
 8003360:	2310      	movs	r3, #16
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a51      	ldr	r2, [pc, #324]	; (80034b0 <UART_SetConfig+0x304>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d17a      	bne.n	8003466 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003374:	2b08      	cmp	r3, #8
 8003376:	d824      	bhi.n	80033c2 <UART_SetConfig+0x216>
 8003378:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x1d4>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033c3 	.word	0x080033c3
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033c3 	.word	0x080033c3
 8003390:	080033b3 	.word	0x080033b3
 8003394:	080033c3 	.word	0x080033c3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033c3 	.word	0x080033c3
 80033a0:	080033bb 	.word	0x080033bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a4:	f7fe ff74 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 80033a8:	61f8      	str	r0, [r7, #28]
        break;
 80033aa:	e010      	b.n	80033ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ac:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <UART_SetConfig+0x314>)
 80033ae:	61fb      	str	r3, [r7, #28]
        break;
 80033b0:	e00d      	b.n	80033ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b2:	f7fe fed5 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 80033b6:	61f8      	str	r0, [r7, #28]
        break;
 80033b8:	e009      	b.n	80033ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	61fb      	str	r3, [r7, #28]
        break;
 80033c0:	e005      	b.n	80033ce <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8107 	beq.w	80035e4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d305      	bcc.n	80033f2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d903      	bls.n	80033fa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033f8:	e0f4      	b.n	80035e4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2200      	movs	r2, #0
 80033fe:	461c      	mov	r4, r3
 8003400:	4615      	mov	r5, r2
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	022b      	lsls	r3, r5, #8
 800340c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003410:	0222      	lsls	r2, r4, #8
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	6849      	ldr	r1, [r1, #4]
 8003416:	0849      	lsrs	r1, r1, #1
 8003418:	2000      	movs	r0, #0
 800341a:	4688      	mov	r8, r1
 800341c:	4681      	mov	r9, r0
 800341e:	eb12 0a08 	adds.w	sl, r2, r8
 8003422:	eb43 0b09 	adc.w	fp, r3, r9
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003434:	4650      	mov	r0, sl
 8003436:	4659      	mov	r1, fp
 8003438:	f7fc ff1a 	bl	8000270 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4613      	mov	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344a:	d308      	bcc.n	800345e <UART_SetConfig+0x2b2>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d204      	bcs.n	800345e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e0c2      	b.n	80035e4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003464:	e0be      	b.n	80035e4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346e:	d16a      	bne.n	8003546 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003474:	2b08      	cmp	r3, #8
 8003476:	d834      	bhi.n	80034e2 <UART_SetConfig+0x336>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x2d4>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034cd 	.word	0x080034cd
 800348c:	080034e3 	.word	0x080034e3
 8003490:	080034d3 	.word	0x080034d3
 8003494:	080034e3 	.word	0x080034e3
 8003498:	080034e3 	.word	0x080034e3
 800349c:	080034e3 	.word	0x080034e3
 80034a0:	080034db 	.word	0x080034db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7fe fef4 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 80034a8:	61f8      	str	r0, [r7, #28]
        break;
 80034aa:	e020      	b.n	80034ee <UART_SetConfig+0x342>
 80034ac:	efff69f3 	.word	0xefff69f3
 80034b0:	40008000 	.word	0x40008000
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40004400 	.word	0x40004400
 80034c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7fe fefa 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 80034c8:	61f8      	str	r0, [r7, #28]
        break;
 80034ca:	e010      	b.n	80034ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <UART_SetConfig+0x454>)
 80034ce:	61fb      	str	r3, [r7, #28]
        break;
 80034d0:	e00d      	b.n	80034ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d2:	f7fe fe45 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 80034d6:	61f8      	str	r0, [r7, #28]
        break;
 80034d8:	e009      	b.n	80034ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	61fb      	str	r3, [r7, #28]
        break;
 80034e0:	e005      	b.n	80034ee <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d077      	beq.n	80035e4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005a      	lsls	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d916      	bls.n	800353e <UART_SetConfig+0x392>
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d212      	bcs.n	800353e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f023 030f 	bic.w	r3, r3, #15
 8003520:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	b29b      	uxth	r3, r3
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	b29a      	uxth	r2, r3
 800352e:	8afb      	ldrh	r3, [r7, #22]
 8003530:	4313      	orrs	r3, r2
 8003532:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	8afa      	ldrh	r2, [r7, #22]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	e052      	b.n	80035e4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003544:	e04e      	b.n	80035e4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800354a:	2b08      	cmp	r3, #8
 800354c:	d827      	bhi.n	800359e <UART_SetConfig+0x3f2>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0x3a8>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003579 	.word	0x08003579
 8003558:	08003581 	.word	0x08003581
 800355c:	08003589 	.word	0x08003589
 8003560:	0800359f 	.word	0x0800359f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800359f 	.word	0x0800359f
 800356c:	0800359f 	.word	0x0800359f
 8003570:	0800359f 	.word	0x0800359f
 8003574:	08003597 	.word	0x08003597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003578:	f7fe fe8a 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 800357c:	61f8      	str	r0, [r7, #28]
        break;
 800357e:	e014      	b.n	80035aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7fe fe9c 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 8003584:	61f8      	str	r0, [r7, #28]
        break;
 8003586:	e010      	b.n	80035aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <UART_SetConfig+0x454>)
 800358a:	61fb      	str	r3, [r7, #28]
        break;
 800358c:	e00d      	b.n	80035aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7fe fde7 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8003592:	61f8      	str	r0, [r7, #28]
        break;
 8003594:	e009      	b.n	80035aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359a:	61fb      	str	r3, [r7, #28]
        break;
 800359c:	e005      	b.n	80035aa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035a8:	bf00      	nop
    }

    if (pclk != 0U)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d019      	beq.n	80035e4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	085a      	lsrs	r2, r3, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	d909      	bls.n	80035de <UART_SetConfig+0x432>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d205      	bcs.n	80035de <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	e002      	b.n	80035e4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	00f42400 	.word	0x00f42400

08003604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01a      	beq.n	800371a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003702:	d10a      	bne.n	800371a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	605a      	str	r2, [r3, #4]
  }
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003758:	f7fd fc2a 	bl	8000fb0 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b08      	cmp	r3, #8
 800376a:	d10e      	bne.n	800378a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f82d 	bl	80037da <UART_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e023      	b.n	80037d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d10e      	bne.n	80037b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f817 	bl	80037da <UART_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e00d      	b.n	80037d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b09c      	sub	sp, #112	; 0x70
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ea:	e0a5      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	f000 80a1 	beq.w	8003938 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fd fbdb 	bl	8000fb0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <UART_WaitOnFlagUntilTimeout+0x32>
 8003806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003808:	2b00      	cmp	r3, #0
 800380a:	d13e      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800381a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003820:	667b      	str	r3, [r7, #100]	; 0x64
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800382a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800382c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003830:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e6      	bne.n	800380c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	663b      	str	r3, [r7, #96]	; 0x60
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3308      	adds	r3, #8
 800385c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800385e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800386c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e5      	bne.n	800383e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e067      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d04f      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a6:	d147      	bne.n	8003938 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
 80038d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e6      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	613b      	str	r3, [r7, #16]
   return(result);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003904:	623a      	str	r2, [r7, #32]
 8003906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	69f9      	ldr	r1, [r7, #28]
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	61bb      	str	r3, [r7, #24]
   return(result);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e010      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	f43f af4a 	beq.w	80037ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3770      	adds	r7, #112	; 0x70
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003964:	b480      	push	{r7}
 8003966:	b097      	sub	sp, #92	; 0x5c
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d10e      	bne.n	80039b6 <UART_Start_Receive_IT+0x52>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <UART_Start_Receive_IT+0x48>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039aa:	e02d      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b4:	e028      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <UART_Start_Receive_IT+0x76>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <UART_Start_Receive_IT+0x6c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ce:	e01b      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	; 0x7f
 80039d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d8:	e016      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e2:	d10d      	bne.n	8003a00 <UART_Start_Receive_IT+0x9c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <UART_Start_Receive_IT+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	227f      	movs	r2, #127	; 0x7f
 80039f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039f4:	e008      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039fe:	e003      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	; 0x22
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a52:	d107      	bne.n	8003a64 <UART_Start_Receive_IT+0x100>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a24      	ldr	r2, [pc, #144]	; (8003af0 <UART_Start_Receive_IT+0x18c>)
 8003a60:	665a      	str	r2, [r3, #100]	; 0x64
 8003a62:	e002      	b.n	8003a6a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <UART_Start_Receive_IT+0x190>)
 8003a68:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d019      	beq.n	8003aae <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e6      	bne.n	8003a7a <UART_Start_Receive_IT+0x116>
 8003aac:	e018      	b.n	8003ae0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f043 0320 	orr.w	r3, r3, #32
 8003ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	69f9      	ldr	r1, [r7, #28]
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e6      	bne.n	8003aae <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	375c      	adds	r7, #92	; 0x5c
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	08003f17 	.word	0x08003f17
 8003af4:	08003db7 	.word	0x08003db7

08003af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b095      	sub	sp, #84	; 0x54
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e6      	bne.n	8003b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3308      	adds	r3, #8
 8003b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d118      	bne.n	8003ba0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f023 0310 	bic.w	r3, r3, #16
 8003b82:	647b      	str	r3, [r7, #68]	; 0x44
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6979      	ldr	r1, [r7, #20]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	613b      	str	r3, [r7, #16]
   return(result);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e6      	bne.n	8003b6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bb2:	bf00      	nop
 8003bb4:	3754      	adds	r7, #84	; 0x54
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff facf 	bl	8003180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b08f      	sub	sp, #60	; 0x3c
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf6:	2b21      	cmp	r3, #33	; 0x21
 8003bf8:	d14d      	bne.n	8003c96 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d132      	bne.n	8003c6c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c6a:	e014      	b.n	8003c96 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b292      	uxth	r2, r2
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003c96:	bf00      	nop
 8003c98:	373c      	adds	r7, #60	; 0x3c
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b091      	sub	sp, #68	; 0x44
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	2b21      	cmp	r3, #33	; 0x21
 8003cb0:	d151      	bne.n	8003d56 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d132      	bne.n	8003d24 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	623b      	str	r3, [r7, #32]
   return(result);
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e6      	bne.n	8003cbe <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e6      	bne.n	8003cf0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d22:	e018      	b.n	8003d56 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d36:	b292      	uxth	r2, r2
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d56:	bf00      	nop
 8003d58:	3744      	adds	r7, #68	; 0x44
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6979      	ldr	r1, [r7, #20]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fc ff21 	bl	8000bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dae:	bf00      	nop
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b096      	sub	sp, #88	; 0x58
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dcc:	2b22      	cmp	r3, #34	; 0x22
 8003dce:	f040 8094 	bne.w	8003efa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ddc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003de0:	b2d9      	uxtb	r1, r3
 8003de2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	400a      	ands	r2, r1
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d179      	bne.n	8003f0e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d12e      	bne.n	8003ef2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e6      	bne.n	8003e9a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d103      	bne.n	8003ee2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2210      	movs	r2, #16
 8003ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff f952 	bl	8003194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ef0:	e00d      	b.n	8003f0e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc fe3c 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8003ef8:	e009      	b.n	8003f0e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	8b1b      	ldrh	r3, [r3, #24]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	831a      	strh	r2, [r3, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	3758      	adds	r7, #88	; 0x58
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b096      	sub	sp, #88	; 0x58
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2c:	2b22      	cmp	r3, #34	; 0x22
 8003f2e:	f040 8094 	bne.w	800405a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f42:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003f46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d179      	bne.n	800406e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f98:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d12e      	bne.n	8004052 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60bb      	str	r3, [r7, #8]
   return(result);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b10      	cmp	r3, #16
 8004038:	d103      	bne.n	8004042 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2210      	movs	r2, #16
 8004040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff f8a2 	bl	8003194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004050:	e00d      	b.n	800406e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fc fd8c 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8004058:	e009      	b.n	800406e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	8b1b      	ldrh	r3, [r3, #24]
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	b292      	uxth	r2, r2
 800406c:	831a      	strh	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	3758      	adds	r7, #88	; 0x58
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <__errno>:
 800408c:	4b01      	ldr	r3, [pc, #4]	; (8004094 <__errno+0x8>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000011c 	.word	0x2000011c

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	4d0d      	ldr	r5, [pc, #52]	; (80040d0 <__libc_init_array+0x38>)
 800409c:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <__libc_init_array+0x3c>)
 800409e:	1b64      	subs	r4, r4, r5
 80040a0:	10a4      	asrs	r4, r4, #2
 80040a2:	2600      	movs	r6, #0
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	4d0b      	ldr	r5, [pc, #44]	; (80040d8 <__libc_init_array+0x40>)
 80040aa:	4c0c      	ldr	r4, [pc, #48]	; (80040dc <__libc_init_array+0x44>)
 80040ac:	f000 fc96 	bl	80049dc <_init>
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	2600      	movs	r6, #0
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	08004ba8 	.word	0x08004ba8
 80040d4:	08004ba8 	.word	0x08004ba8
 80040d8:	08004ba8 	.word	0x08004ba8
 80040dc:	08004bac 	.word	0x08004bac

080040e0 <memset>:
 80040e0:	4402      	add	r2, r0
 80040e2:	4603      	mov	r3, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <siprintf>:
 80040f0:	b40e      	push	{r1, r2, r3}
 80040f2:	b500      	push	{lr}
 80040f4:	b09c      	sub	sp, #112	; 0x70
 80040f6:	ab1d      	add	r3, sp, #116	; 0x74
 80040f8:	9002      	str	r0, [sp, #8]
 80040fa:	9006      	str	r0, [sp, #24]
 80040fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004100:	4809      	ldr	r0, [pc, #36]	; (8004128 <siprintf+0x38>)
 8004102:	9107      	str	r1, [sp, #28]
 8004104:	9104      	str	r1, [sp, #16]
 8004106:	4909      	ldr	r1, [pc, #36]	; (800412c <siprintf+0x3c>)
 8004108:	f853 2b04 	ldr.w	r2, [r3], #4
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	a902      	add	r1, sp, #8
 8004114:	f000 f870 	bl	80041f8 <_svfiprintf_r>
 8004118:	9b02      	ldr	r3, [sp, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	b01c      	add	sp, #112	; 0x70
 8004120:	f85d eb04 	ldr.w	lr, [sp], #4
 8004124:	b003      	add	sp, #12
 8004126:	4770      	bx	lr
 8004128:	2000011c 	.word	0x2000011c
 800412c:	ffff0208 	.word	0xffff0208

08004130 <strcpy>:
 8004130:	4603      	mov	r3, r0
 8004132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004136:	f803 2b01 	strb.w	r2, [r3], #1
 800413a:	2a00      	cmp	r2, #0
 800413c:	d1f9      	bne.n	8004132 <strcpy+0x2>
 800413e:	4770      	bx	lr

08004140 <__ssputs_r>:
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	688e      	ldr	r6, [r1, #8]
 8004146:	429e      	cmp	r6, r3
 8004148:	4682      	mov	sl, r0
 800414a:	460c      	mov	r4, r1
 800414c:	4690      	mov	r8, r2
 800414e:	461f      	mov	r7, r3
 8004150:	d838      	bhi.n	80041c4 <__ssputs_r+0x84>
 8004152:	898a      	ldrh	r2, [r1, #12]
 8004154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004158:	d032      	beq.n	80041c0 <__ssputs_r+0x80>
 800415a:	6825      	ldr	r5, [r4, #0]
 800415c:	6909      	ldr	r1, [r1, #16]
 800415e:	eba5 0901 	sub.w	r9, r5, r1
 8004162:	6965      	ldr	r5, [r4, #20]
 8004164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800416c:	3301      	adds	r3, #1
 800416e:	444b      	add	r3, r9
 8004170:	106d      	asrs	r5, r5, #1
 8004172:	429d      	cmp	r5, r3
 8004174:	bf38      	it	cc
 8004176:	461d      	movcc	r5, r3
 8004178:	0553      	lsls	r3, r2, #21
 800417a:	d531      	bpl.n	80041e0 <__ssputs_r+0xa0>
 800417c:	4629      	mov	r1, r5
 800417e:	f000 fb63 	bl	8004848 <_malloc_r>
 8004182:	4606      	mov	r6, r0
 8004184:	b950      	cbnz	r0, 800419c <__ssputs_r+0x5c>
 8004186:	230c      	movs	r3, #12
 8004188:	f8ca 3000 	str.w	r3, [sl]
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419c:	6921      	ldr	r1, [r4, #16]
 800419e:	464a      	mov	r2, r9
 80041a0:	f000 fabe 	bl	8004720 <memcpy>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	6126      	str	r6, [r4, #16]
 80041b2:	6165      	str	r5, [r4, #20]
 80041b4:	444e      	add	r6, r9
 80041b6:	eba5 0509 	sub.w	r5, r5, r9
 80041ba:	6026      	str	r6, [r4, #0]
 80041bc:	60a5      	str	r5, [r4, #8]
 80041be:	463e      	mov	r6, r7
 80041c0:	42be      	cmp	r6, r7
 80041c2:	d900      	bls.n	80041c6 <__ssputs_r+0x86>
 80041c4:	463e      	mov	r6, r7
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	4632      	mov	r2, r6
 80041ca:	4641      	mov	r1, r8
 80041cc:	f000 fab6 	bl	800473c <memmove>
 80041d0:	68a3      	ldr	r3, [r4, #8]
 80041d2:	1b9b      	subs	r3, r3, r6
 80041d4:	60a3      	str	r3, [r4, #8]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	4433      	add	r3, r6
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	2000      	movs	r0, #0
 80041de:	e7db      	b.n	8004198 <__ssputs_r+0x58>
 80041e0:	462a      	mov	r2, r5
 80041e2:	f000 fba5 	bl	8004930 <_realloc_r>
 80041e6:	4606      	mov	r6, r0
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d1e1      	bne.n	80041b0 <__ssputs_r+0x70>
 80041ec:	6921      	ldr	r1, [r4, #16]
 80041ee:	4650      	mov	r0, sl
 80041f0:	f000 fabe 	bl	8004770 <_free_r>
 80041f4:	e7c7      	b.n	8004186 <__ssputs_r+0x46>
	...

080041f8 <_svfiprintf_r>:
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	4698      	mov	r8, r3
 80041fe:	898b      	ldrh	r3, [r1, #12]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	b09d      	sub	sp, #116	; 0x74
 8004204:	4607      	mov	r7, r0
 8004206:	460d      	mov	r5, r1
 8004208:	4614      	mov	r4, r2
 800420a:	d50e      	bpl.n	800422a <_svfiprintf_r+0x32>
 800420c:	690b      	ldr	r3, [r1, #16]
 800420e:	b963      	cbnz	r3, 800422a <_svfiprintf_r+0x32>
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	f000 fb19 	bl	8004848 <_malloc_r>
 8004216:	6028      	str	r0, [r5, #0]
 8004218:	6128      	str	r0, [r5, #16]
 800421a:	b920      	cbnz	r0, 8004226 <_svfiprintf_r+0x2e>
 800421c:	230c      	movs	r3, #12
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	e0d1      	b.n	80043ca <_svfiprintf_r+0x1d2>
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	616b      	str	r3, [r5, #20]
 800422a:	2300      	movs	r3, #0
 800422c:	9309      	str	r3, [sp, #36]	; 0x24
 800422e:	2320      	movs	r3, #32
 8004230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004234:	f8cd 800c 	str.w	r8, [sp, #12]
 8004238:	2330      	movs	r3, #48	; 0x30
 800423a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043e4 <_svfiprintf_r+0x1ec>
 800423e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004242:	f04f 0901 	mov.w	r9, #1
 8004246:	4623      	mov	r3, r4
 8004248:	469a      	mov	sl, r3
 800424a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800424e:	b10a      	cbz	r2, 8004254 <_svfiprintf_r+0x5c>
 8004250:	2a25      	cmp	r2, #37	; 0x25
 8004252:	d1f9      	bne.n	8004248 <_svfiprintf_r+0x50>
 8004254:	ebba 0b04 	subs.w	fp, sl, r4
 8004258:	d00b      	beq.n	8004272 <_svfiprintf_r+0x7a>
 800425a:	465b      	mov	r3, fp
 800425c:	4622      	mov	r2, r4
 800425e:	4629      	mov	r1, r5
 8004260:	4638      	mov	r0, r7
 8004262:	f7ff ff6d 	bl	8004140 <__ssputs_r>
 8004266:	3001      	adds	r0, #1
 8004268:	f000 80aa 	beq.w	80043c0 <_svfiprintf_r+0x1c8>
 800426c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800426e:	445a      	add	r2, fp
 8004270:	9209      	str	r2, [sp, #36]	; 0x24
 8004272:	f89a 3000 	ldrb.w	r3, [sl]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a2 	beq.w	80043c0 <_svfiprintf_r+0x1c8>
 800427c:	2300      	movs	r3, #0
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004286:	f10a 0a01 	add.w	sl, sl, #1
 800428a:	9304      	str	r3, [sp, #16]
 800428c:	9307      	str	r3, [sp, #28]
 800428e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004292:	931a      	str	r3, [sp, #104]	; 0x68
 8004294:	4654      	mov	r4, sl
 8004296:	2205      	movs	r2, #5
 8004298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429c:	4851      	ldr	r0, [pc, #324]	; (80043e4 <_svfiprintf_r+0x1ec>)
 800429e:	f7fb ff97 	bl	80001d0 <memchr>
 80042a2:	9a04      	ldr	r2, [sp, #16]
 80042a4:	b9d8      	cbnz	r0, 80042de <_svfiprintf_r+0xe6>
 80042a6:	06d0      	lsls	r0, r2, #27
 80042a8:	bf44      	itt	mi
 80042aa:	2320      	movmi	r3, #32
 80042ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b0:	0711      	lsls	r1, r2, #28
 80042b2:	bf44      	itt	mi
 80042b4:	232b      	movmi	r3, #43	; 0x2b
 80042b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ba:	f89a 3000 	ldrb.w	r3, [sl]
 80042be:	2b2a      	cmp	r3, #42	; 0x2a
 80042c0:	d015      	beq.n	80042ee <_svfiprintf_r+0xf6>
 80042c2:	9a07      	ldr	r2, [sp, #28]
 80042c4:	4654      	mov	r4, sl
 80042c6:	2000      	movs	r0, #0
 80042c8:	f04f 0c0a 	mov.w	ip, #10
 80042cc:	4621      	mov	r1, r4
 80042ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042d2:	3b30      	subs	r3, #48	; 0x30
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	d94e      	bls.n	8004376 <_svfiprintf_r+0x17e>
 80042d8:	b1b0      	cbz	r0, 8004308 <_svfiprintf_r+0x110>
 80042da:	9207      	str	r2, [sp, #28]
 80042dc:	e014      	b.n	8004308 <_svfiprintf_r+0x110>
 80042de:	eba0 0308 	sub.w	r3, r0, r8
 80042e2:	fa09 f303 	lsl.w	r3, r9, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	46a2      	mov	sl, r4
 80042ec:	e7d2      	b.n	8004294 <_svfiprintf_r+0x9c>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	1d19      	adds	r1, r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	9103      	str	r1, [sp, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfbb      	ittet	lt
 80042fa:	425b      	neglt	r3, r3
 80042fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004300:	9307      	strge	r3, [sp, #28]
 8004302:	9307      	strlt	r3, [sp, #28]
 8004304:	bfb8      	it	lt
 8004306:	9204      	strlt	r2, [sp, #16]
 8004308:	7823      	ldrb	r3, [r4, #0]
 800430a:	2b2e      	cmp	r3, #46	; 0x2e
 800430c:	d10c      	bne.n	8004328 <_svfiprintf_r+0x130>
 800430e:	7863      	ldrb	r3, [r4, #1]
 8004310:	2b2a      	cmp	r3, #42	; 0x2a
 8004312:	d135      	bne.n	8004380 <_svfiprintf_r+0x188>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	9203      	str	r2, [sp, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	bfb8      	it	lt
 8004320:	f04f 33ff 	movlt.w	r3, #4294967295
 8004324:	3402      	adds	r4, #2
 8004326:	9305      	str	r3, [sp, #20]
 8004328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043f4 <_svfiprintf_r+0x1fc>
 800432c:	7821      	ldrb	r1, [r4, #0]
 800432e:	2203      	movs	r2, #3
 8004330:	4650      	mov	r0, sl
 8004332:	f7fb ff4d 	bl	80001d0 <memchr>
 8004336:	b140      	cbz	r0, 800434a <_svfiprintf_r+0x152>
 8004338:	2340      	movs	r3, #64	; 0x40
 800433a:	eba0 000a 	sub.w	r0, r0, sl
 800433e:	fa03 f000 	lsl.w	r0, r3, r0
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	4303      	orrs	r3, r0
 8004346:	3401      	adds	r4, #1
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434e:	4826      	ldr	r0, [pc, #152]	; (80043e8 <_svfiprintf_r+0x1f0>)
 8004350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004354:	2206      	movs	r2, #6
 8004356:	f7fb ff3b 	bl	80001d0 <memchr>
 800435a:	2800      	cmp	r0, #0
 800435c:	d038      	beq.n	80043d0 <_svfiprintf_r+0x1d8>
 800435e:	4b23      	ldr	r3, [pc, #140]	; (80043ec <_svfiprintf_r+0x1f4>)
 8004360:	bb1b      	cbnz	r3, 80043aa <_svfiprintf_r+0x1b2>
 8004362:	9b03      	ldr	r3, [sp, #12]
 8004364:	3307      	adds	r3, #7
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	3308      	adds	r3, #8
 800436c:	9303      	str	r3, [sp, #12]
 800436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004370:	4433      	add	r3, r6
 8004372:	9309      	str	r3, [sp, #36]	; 0x24
 8004374:	e767      	b.n	8004246 <_svfiprintf_r+0x4e>
 8004376:	fb0c 3202 	mla	r2, ip, r2, r3
 800437a:	460c      	mov	r4, r1
 800437c:	2001      	movs	r0, #1
 800437e:	e7a5      	b.n	80042cc <_svfiprintf_r+0xd4>
 8004380:	2300      	movs	r3, #0
 8004382:	3401      	adds	r4, #1
 8004384:	9305      	str	r3, [sp, #20]
 8004386:	4619      	mov	r1, r3
 8004388:	f04f 0c0a 	mov.w	ip, #10
 800438c:	4620      	mov	r0, r4
 800438e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004392:	3a30      	subs	r2, #48	; 0x30
 8004394:	2a09      	cmp	r2, #9
 8004396:	d903      	bls.n	80043a0 <_svfiprintf_r+0x1a8>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0c5      	beq.n	8004328 <_svfiprintf_r+0x130>
 800439c:	9105      	str	r1, [sp, #20]
 800439e:	e7c3      	b.n	8004328 <_svfiprintf_r+0x130>
 80043a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043a4:	4604      	mov	r4, r0
 80043a6:	2301      	movs	r3, #1
 80043a8:	e7f0      	b.n	800438c <_svfiprintf_r+0x194>
 80043aa:	ab03      	add	r3, sp, #12
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	462a      	mov	r2, r5
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <_svfiprintf_r+0x1f8>)
 80043b2:	a904      	add	r1, sp, #16
 80043b4:	4638      	mov	r0, r7
 80043b6:	f3af 8000 	nop.w
 80043ba:	1c42      	adds	r2, r0, #1
 80043bc:	4606      	mov	r6, r0
 80043be:	d1d6      	bne.n	800436e <_svfiprintf_r+0x176>
 80043c0:	89ab      	ldrh	r3, [r5, #12]
 80043c2:	065b      	lsls	r3, r3, #25
 80043c4:	f53f af2c 	bmi.w	8004220 <_svfiprintf_r+0x28>
 80043c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ca:	b01d      	add	sp, #116	; 0x74
 80043cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d0:	ab03      	add	r3, sp, #12
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <_svfiprintf_r+0x1f8>)
 80043d8:	a904      	add	r1, sp, #16
 80043da:	4638      	mov	r0, r7
 80043dc:	f000 f87a 	bl	80044d4 <_printf_i>
 80043e0:	e7eb      	b.n	80043ba <_svfiprintf_r+0x1c2>
 80043e2:	bf00      	nop
 80043e4:	08004b6c 	.word	0x08004b6c
 80043e8:	08004b76 	.word	0x08004b76
 80043ec:	00000000 	.word	0x00000000
 80043f0:	08004141 	.word	0x08004141
 80043f4:	08004b72 	.word	0x08004b72

080043f8 <_printf_common>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	4616      	mov	r6, r2
 80043fe:	4699      	mov	r9, r3
 8004400:	688a      	ldr	r2, [r1, #8]
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004408:	4293      	cmp	r3, r2
 800440a:	bfb8      	it	lt
 800440c:	4613      	movlt	r3, r2
 800440e:	6033      	str	r3, [r6, #0]
 8004410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004414:	4607      	mov	r7, r0
 8004416:	460c      	mov	r4, r1
 8004418:	b10a      	cbz	r2, 800441e <_printf_common+0x26>
 800441a:	3301      	adds	r3, #1
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	0699      	lsls	r1, r3, #26
 8004422:	bf42      	ittt	mi
 8004424:	6833      	ldrmi	r3, [r6, #0]
 8004426:	3302      	addmi	r3, #2
 8004428:	6033      	strmi	r3, [r6, #0]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	f015 0506 	ands.w	r5, r5, #6
 8004430:	d106      	bne.n	8004440 <_printf_common+0x48>
 8004432:	f104 0a19 	add.w	sl, r4, #25
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	42ab      	cmp	r3, r5
 800443e:	dc26      	bgt.n	800448e <_printf_common+0x96>
 8004440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004444:	1e13      	subs	r3, r2, #0
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	bf18      	it	ne
 800444a:	2301      	movne	r3, #1
 800444c:	0692      	lsls	r2, r2, #26
 800444e:	d42b      	bmi.n	80044a8 <_printf_common+0xb0>
 8004450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004454:	4649      	mov	r1, r9
 8004456:	4638      	mov	r0, r7
 8004458:	47c0      	blx	r8
 800445a:	3001      	adds	r0, #1
 800445c:	d01e      	beq.n	800449c <_printf_common+0xa4>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	68e5      	ldr	r5, [r4, #12]
 8004462:	6832      	ldr	r2, [r6, #0]
 8004464:	f003 0306 	and.w	r3, r3, #6
 8004468:	2b04      	cmp	r3, #4
 800446a:	bf08      	it	eq
 800446c:	1aad      	subeq	r5, r5, r2
 800446e:	68a3      	ldr	r3, [r4, #8]
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	bf0c      	ite	eq
 8004474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004478:	2500      	movne	r5, #0
 800447a:	4293      	cmp	r3, r2
 800447c:	bfc4      	itt	gt
 800447e:	1a9b      	subgt	r3, r3, r2
 8004480:	18ed      	addgt	r5, r5, r3
 8004482:	2600      	movs	r6, #0
 8004484:	341a      	adds	r4, #26
 8004486:	42b5      	cmp	r5, r6
 8004488:	d11a      	bne.n	80044c0 <_printf_common+0xc8>
 800448a:	2000      	movs	r0, #0
 800448c:	e008      	b.n	80044a0 <_printf_common+0xa8>
 800448e:	2301      	movs	r3, #1
 8004490:	4652      	mov	r2, sl
 8004492:	4649      	mov	r1, r9
 8004494:	4638      	mov	r0, r7
 8004496:	47c0      	blx	r8
 8004498:	3001      	adds	r0, #1
 800449a:	d103      	bne.n	80044a4 <_printf_common+0xac>
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a4:	3501      	adds	r5, #1
 80044a6:	e7c6      	b.n	8004436 <_printf_common+0x3e>
 80044a8:	18e1      	adds	r1, r4, r3
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	2030      	movs	r0, #48	; 0x30
 80044ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b2:	4422      	add	r2, r4
 80044b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044bc:	3302      	adds	r3, #2
 80044be:	e7c7      	b.n	8004450 <_printf_common+0x58>
 80044c0:	2301      	movs	r3, #1
 80044c2:	4622      	mov	r2, r4
 80044c4:	4649      	mov	r1, r9
 80044c6:	4638      	mov	r0, r7
 80044c8:	47c0      	blx	r8
 80044ca:	3001      	adds	r0, #1
 80044cc:	d0e6      	beq.n	800449c <_printf_common+0xa4>
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7d9      	b.n	8004486 <_printf_common+0x8e>
	...

080044d4 <_printf_i>:
 80044d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	7e0f      	ldrb	r7, [r1, #24]
 80044da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044dc:	2f78      	cmp	r7, #120	; 0x78
 80044de:	4691      	mov	r9, r2
 80044e0:	4680      	mov	r8, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	469a      	mov	sl, r3
 80044e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ea:	d807      	bhi.n	80044fc <_printf_i+0x28>
 80044ec:	2f62      	cmp	r7, #98	; 0x62
 80044ee:	d80a      	bhi.n	8004506 <_printf_i+0x32>
 80044f0:	2f00      	cmp	r7, #0
 80044f2:	f000 80d8 	beq.w	80046a6 <_printf_i+0x1d2>
 80044f6:	2f58      	cmp	r7, #88	; 0x58
 80044f8:	f000 80a3 	beq.w	8004642 <_printf_i+0x16e>
 80044fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004504:	e03a      	b.n	800457c <_printf_i+0xa8>
 8004506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450a:	2b15      	cmp	r3, #21
 800450c:	d8f6      	bhi.n	80044fc <_printf_i+0x28>
 800450e:	a101      	add	r1, pc, #4	; (adr r1, 8004514 <_printf_i+0x40>)
 8004510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004514:	0800456d 	.word	0x0800456d
 8004518:	08004581 	.word	0x08004581
 800451c:	080044fd 	.word	0x080044fd
 8004520:	080044fd 	.word	0x080044fd
 8004524:	080044fd 	.word	0x080044fd
 8004528:	080044fd 	.word	0x080044fd
 800452c:	08004581 	.word	0x08004581
 8004530:	080044fd 	.word	0x080044fd
 8004534:	080044fd 	.word	0x080044fd
 8004538:	080044fd 	.word	0x080044fd
 800453c:	080044fd 	.word	0x080044fd
 8004540:	0800468d 	.word	0x0800468d
 8004544:	080045b1 	.word	0x080045b1
 8004548:	0800466f 	.word	0x0800466f
 800454c:	080044fd 	.word	0x080044fd
 8004550:	080044fd 	.word	0x080044fd
 8004554:	080046af 	.word	0x080046af
 8004558:	080044fd 	.word	0x080044fd
 800455c:	080045b1 	.word	0x080045b1
 8004560:	080044fd 	.word	0x080044fd
 8004564:	080044fd 	.word	0x080044fd
 8004568:	08004677 	.word	0x08004677
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	602a      	str	r2, [r5, #0]
 8004574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800457c:	2301      	movs	r3, #1
 800457e:	e0a3      	b.n	80046c8 <_printf_i+0x1f4>
 8004580:	6820      	ldr	r0, [r4, #0]
 8004582:	6829      	ldr	r1, [r5, #0]
 8004584:	0606      	lsls	r6, r0, #24
 8004586:	f101 0304 	add.w	r3, r1, #4
 800458a:	d50a      	bpl.n	80045a2 <_printf_i+0xce>
 800458c:	680e      	ldr	r6, [r1, #0]
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	2e00      	cmp	r6, #0
 8004592:	da03      	bge.n	800459c <_printf_i+0xc8>
 8004594:	232d      	movs	r3, #45	; 0x2d
 8004596:	4276      	negs	r6, r6
 8004598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459c:	485e      	ldr	r0, [pc, #376]	; (8004718 <_printf_i+0x244>)
 800459e:	230a      	movs	r3, #10
 80045a0:	e019      	b.n	80045d6 <_printf_i+0x102>
 80045a2:	680e      	ldr	r6, [r1, #0]
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045aa:	bf18      	it	ne
 80045ac:	b236      	sxthne	r6, r6
 80045ae:	e7ef      	b.n	8004590 <_printf_i+0xbc>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	6029      	str	r1, [r5, #0]
 80045b8:	0601      	lsls	r1, r0, #24
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0xec>
 80045bc:	681e      	ldr	r6, [r3, #0]
 80045be:	e002      	b.n	80045c6 <_printf_i+0xf2>
 80045c0:	0646      	lsls	r6, r0, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0xe8>
 80045c4:	881e      	ldrh	r6, [r3, #0]
 80045c6:	4854      	ldr	r0, [pc, #336]	; (8004718 <_printf_i+0x244>)
 80045c8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ca:	bf0c      	ite	eq
 80045cc:	2308      	moveq	r3, #8
 80045ce:	230a      	movne	r3, #10
 80045d0:	2100      	movs	r1, #0
 80045d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045d6:	6865      	ldr	r5, [r4, #4]
 80045d8:	60a5      	str	r5, [r4, #8]
 80045da:	2d00      	cmp	r5, #0
 80045dc:	bfa2      	ittt	ge
 80045de:	6821      	ldrge	r1, [r4, #0]
 80045e0:	f021 0104 	bicge.w	r1, r1, #4
 80045e4:	6021      	strge	r1, [r4, #0]
 80045e6:	b90e      	cbnz	r6, 80045ec <_printf_i+0x118>
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	d04d      	beq.n	8004688 <_printf_i+0x1b4>
 80045ec:	4615      	mov	r5, r2
 80045ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80045f2:	fb03 6711 	mls	r7, r3, r1, r6
 80045f6:	5dc7      	ldrb	r7, [r0, r7]
 80045f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045fc:	4637      	mov	r7, r6
 80045fe:	42bb      	cmp	r3, r7
 8004600:	460e      	mov	r6, r1
 8004602:	d9f4      	bls.n	80045ee <_printf_i+0x11a>
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10b      	bne.n	8004620 <_printf_i+0x14c>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	07de      	lsls	r6, r3, #31
 800460c:	d508      	bpl.n	8004620 <_printf_i+0x14c>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	6861      	ldr	r1, [r4, #4]
 8004612:	4299      	cmp	r1, r3
 8004614:	bfde      	ittt	le
 8004616:	2330      	movle	r3, #48	; 0x30
 8004618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800461c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004620:	1b52      	subs	r2, r2, r5
 8004622:	6122      	str	r2, [r4, #16]
 8004624:	f8cd a000 	str.w	sl, [sp]
 8004628:	464b      	mov	r3, r9
 800462a:	aa03      	add	r2, sp, #12
 800462c:	4621      	mov	r1, r4
 800462e:	4640      	mov	r0, r8
 8004630:	f7ff fee2 	bl	80043f8 <_printf_common>
 8004634:	3001      	adds	r0, #1
 8004636:	d14c      	bne.n	80046d2 <_printf_i+0x1fe>
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	b004      	add	sp, #16
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004642:	4835      	ldr	r0, [pc, #212]	; (8004718 <_printf_i+0x244>)
 8004644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004648:	6829      	ldr	r1, [r5, #0]
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004650:	6029      	str	r1, [r5, #0]
 8004652:	061d      	lsls	r5, r3, #24
 8004654:	d514      	bpl.n	8004680 <_printf_i+0x1ac>
 8004656:	07df      	lsls	r7, r3, #31
 8004658:	bf44      	itt	mi
 800465a:	f043 0320 	orrmi.w	r3, r3, #32
 800465e:	6023      	strmi	r3, [r4, #0]
 8004660:	b91e      	cbnz	r6, 800466a <_printf_i+0x196>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	f023 0320 	bic.w	r3, r3, #32
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	2310      	movs	r3, #16
 800466c:	e7b0      	b.n	80045d0 <_printf_i+0xfc>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	2378      	movs	r3, #120	; 0x78
 8004678:	4828      	ldr	r0, [pc, #160]	; (800471c <_printf_i+0x248>)
 800467a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800467e:	e7e3      	b.n	8004648 <_printf_i+0x174>
 8004680:	0659      	lsls	r1, r3, #25
 8004682:	bf48      	it	mi
 8004684:	b2b6      	uxthmi	r6, r6
 8004686:	e7e6      	b.n	8004656 <_printf_i+0x182>
 8004688:	4615      	mov	r5, r2
 800468a:	e7bb      	b.n	8004604 <_printf_i+0x130>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	6826      	ldr	r6, [r4, #0]
 8004690:	6961      	ldr	r1, [r4, #20]
 8004692:	1d18      	adds	r0, r3, #4
 8004694:	6028      	str	r0, [r5, #0]
 8004696:	0635      	lsls	r5, r6, #24
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	d501      	bpl.n	80046a0 <_printf_i+0x1cc>
 800469c:	6019      	str	r1, [r3, #0]
 800469e:	e002      	b.n	80046a6 <_printf_i+0x1d2>
 80046a0:	0670      	lsls	r0, r6, #25
 80046a2:	d5fb      	bpl.n	800469c <_printf_i+0x1c8>
 80046a4:	8019      	strh	r1, [r3, #0]
 80046a6:	2300      	movs	r3, #0
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	4615      	mov	r5, r2
 80046ac:	e7ba      	b.n	8004624 <_printf_i+0x150>
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	1d1a      	adds	r2, r3, #4
 80046b2:	602a      	str	r2, [r5, #0]
 80046b4:	681d      	ldr	r5, [r3, #0]
 80046b6:	6862      	ldr	r2, [r4, #4]
 80046b8:	2100      	movs	r1, #0
 80046ba:	4628      	mov	r0, r5
 80046bc:	f7fb fd88 	bl	80001d0 <memchr>
 80046c0:	b108      	cbz	r0, 80046c6 <_printf_i+0x1f2>
 80046c2:	1b40      	subs	r0, r0, r5
 80046c4:	6060      	str	r0, [r4, #4]
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	6123      	str	r3, [r4, #16]
 80046ca:	2300      	movs	r3, #0
 80046cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d0:	e7a8      	b.n	8004624 <_printf_i+0x150>
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	462a      	mov	r2, r5
 80046d6:	4649      	mov	r1, r9
 80046d8:	4640      	mov	r0, r8
 80046da:	47d0      	blx	sl
 80046dc:	3001      	adds	r0, #1
 80046de:	d0ab      	beq.n	8004638 <_printf_i+0x164>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	079b      	lsls	r3, r3, #30
 80046e4:	d413      	bmi.n	800470e <_printf_i+0x23a>
 80046e6:	68e0      	ldr	r0, [r4, #12]
 80046e8:	9b03      	ldr	r3, [sp, #12]
 80046ea:	4298      	cmp	r0, r3
 80046ec:	bfb8      	it	lt
 80046ee:	4618      	movlt	r0, r3
 80046f0:	e7a4      	b.n	800463c <_printf_i+0x168>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4632      	mov	r2, r6
 80046f6:	4649      	mov	r1, r9
 80046f8:	4640      	mov	r0, r8
 80046fa:	47d0      	blx	sl
 80046fc:	3001      	adds	r0, #1
 80046fe:	d09b      	beq.n	8004638 <_printf_i+0x164>
 8004700:	3501      	adds	r5, #1
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	9903      	ldr	r1, [sp, #12]
 8004706:	1a5b      	subs	r3, r3, r1
 8004708:	42ab      	cmp	r3, r5
 800470a:	dcf2      	bgt.n	80046f2 <_printf_i+0x21e>
 800470c:	e7eb      	b.n	80046e6 <_printf_i+0x212>
 800470e:	2500      	movs	r5, #0
 8004710:	f104 0619 	add.w	r6, r4, #25
 8004714:	e7f5      	b.n	8004702 <_printf_i+0x22e>
 8004716:	bf00      	nop
 8004718:	08004b7d 	.word	0x08004b7d
 800471c:	08004b8e 	.word	0x08004b8e

08004720 <memcpy>:
 8004720:	440a      	add	r2, r1
 8004722:	4291      	cmp	r1, r2
 8004724:	f100 33ff 	add.w	r3, r0, #4294967295
 8004728:	d100      	bne.n	800472c <memcpy+0xc>
 800472a:	4770      	bx	lr
 800472c:	b510      	push	{r4, lr}
 800472e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004736:	4291      	cmp	r1, r2
 8004738:	d1f9      	bne.n	800472e <memcpy+0xe>
 800473a:	bd10      	pop	{r4, pc}

0800473c <memmove>:
 800473c:	4288      	cmp	r0, r1
 800473e:	b510      	push	{r4, lr}
 8004740:	eb01 0402 	add.w	r4, r1, r2
 8004744:	d902      	bls.n	800474c <memmove+0x10>
 8004746:	4284      	cmp	r4, r0
 8004748:	4623      	mov	r3, r4
 800474a:	d807      	bhi.n	800475c <memmove+0x20>
 800474c:	1e43      	subs	r3, r0, #1
 800474e:	42a1      	cmp	r1, r4
 8004750:	d008      	beq.n	8004764 <memmove+0x28>
 8004752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800475a:	e7f8      	b.n	800474e <memmove+0x12>
 800475c:	4402      	add	r2, r0
 800475e:	4601      	mov	r1, r0
 8004760:	428a      	cmp	r2, r1
 8004762:	d100      	bne.n	8004766 <memmove+0x2a>
 8004764:	bd10      	pop	{r4, pc}
 8004766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800476a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800476e:	e7f7      	b.n	8004760 <memmove+0x24>

08004770 <_free_r>:
 8004770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004772:	2900      	cmp	r1, #0
 8004774:	d044      	beq.n	8004800 <_free_r+0x90>
 8004776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477a:	9001      	str	r0, [sp, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f1a1 0404 	sub.w	r4, r1, #4
 8004782:	bfb8      	it	lt
 8004784:	18e4      	addlt	r4, r4, r3
 8004786:	f000 f913 	bl	80049b0 <__malloc_lock>
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <_free_r+0x94>)
 800478c:	9801      	ldr	r0, [sp, #4]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	b933      	cbnz	r3, 80047a0 <_free_r+0x30>
 8004792:	6063      	str	r3, [r4, #4]
 8004794:	6014      	str	r4, [r2, #0]
 8004796:	b003      	add	sp, #12
 8004798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800479c:	f000 b90e 	b.w	80049bc <__malloc_unlock>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d908      	bls.n	80047b6 <_free_r+0x46>
 80047a4:	6825      	ldr	r5, [r4, #0]
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf01      	itttt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	1949      	addeq	r1, r1, r5
 80047b2:	6021      	streq	r1, [r4, #0]
 80047b4:	e7ed      	b.n	8004792 <_free_r+0x22>
 80047b6:	461a      	mov	r2, r3
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b10b      	cbz	r3, 80047c0 <_free_r+0x50>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d9fa      	bls.n	80047b6 <_free_r+0x46>
 80047c0:	6811      	ldr	r1, [r2, #0]
 80047c2:	1855      	adds	r5, r2, r1
 80047c4:	42a5      	cmp	r5, r4
 80047c6:	d10b      	bne.n	80047e0 <_free_r+0x70>
 80047c8:	6824      	ldr	r4, [r4, #0]
 80047ca:	4421      	add	r1, r4
 80047cc:	1854      	adds	r4, r2, r1
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	d1e0      	bne.n	8004796 <_free_r+0x26>
 80047d4:	681c      	ldr	r4, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	6053      	str	r3, [r2, #4]
 80047da:	4421      	add	r1, r4
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	e7da      	b.n	8004796 <_free_r+0x26>
 80047e0:	d902      	bls.n	80047e8 <_free_r+0x78>
 80047e2:	230c      	movs	r3, #12
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	e7d6      	b.n	8004796 <_free_r+0x26>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf04      	itt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	bf04      	itt	eq
 80047f8:	1949      	addeq	r1, r1, r5
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	6054      	str	r4, [r2, #4]
 80047fe:	e7ca      	b.n	8004796 <_free_r+0x26>
 8004800:	b003      	add	sp, #12
 8004802:	bd30      	pop	{r4, r5, pc}
 8004804:	2000023c 	.word	0x2000023c

08004808 <sbrk_aligned>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4e0e      	ldr	r6, [pc, #56]	; (8004844 <sbrk_aligned+0x3c>)
 800480c:	460c      	mov	r4, r1
 800480e:	6831      	ldr	r1, [r6, #0]
 8004810:	4605      	mov	r5, r0
 8004812:	b911      	cbnz	r1, 800481a <sbrk_aligned+0x12>
 8004814:	f000 f8bc 	bl	8004990 <_sbrk_r>
 8004818:	6030      	str	r0, [r6, #0]
 800481a:	4621      	mov	r1, r4
 800481c:	4628      	mov	r0, r5
 800481e:	f000 f8b7 	bl	8004990 <_sbrk_r>
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	d00a      	beq.n	800483c <sbrk_aligned+0x34>
 8004826:	1cc4      	adds	r4, r0, #3
 8004828:	f024 0403 	bic.w	r4, r4, #3
 800482c:	42a0      	cmp	r0, r4
 800482e:	d007      	beq.n	8004840 <sbrk_aligned+0x38>
 8004830:	1a21      	subs	r1, r4, r0
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f8ac 	bl	8004990 <_sbrk_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d101      	bne.n	8004840 <sbrk_aligned+0x38>
 800483c:	f04f 34ff 	mov.w	r4, #4294967295
 8004840:	4620      	mov	r0, r4
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	20000240 	.word	0x20000240

08004848 <_malloc_r>:
 8004848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484c:	1ccd      	adds	r5, r1, #3
 800484e:	f025 0503 	bic.w	r5, r5, #3
 8004852:	3508      	adds	r5, #8
 8004854:	2d0c      	cmp	r5, #12
 8004856:	bf38      	it	cc
 8004858:	250c      	movcc	r5, #12
 800485a:	2d00      	cmp	r5, #0
 800485c:	4607      	mov	r7, r0
 800485e:	db01      	blt.n	8004864 <_malloc_r+0x1c>
 8004860:	42a9      	cmp	r1, r5
 8004862:	d905      	bls.n	8004870 <_malloc_r+0x28>
 8004864:	230c      	movs	r3, #12
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	2600      	movs	r6, #0
 800486a:	4630      	mov	r0, r6
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	4e2e      	ldr	r6, [pc, #184]	; (800492c <_malloc_r+0xe4>)
 8004872:	f000 f89d 	bl	80049b0 <__malloc_lock>
 8004876:	6833      	ldr	r3, [r6, #0]
 8004878:	461c      	mov	r4, r3
 800487a:	bb34      	cbnz	r4, 80048ca <_malloc_r+0x82>
 800487c:	4629      	mov	r1, r5
 800487e:	4638      	mov	r0, r7
 8004880:	f7ff ffc2 	bl	8004808 <sbrk_aligned>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	4604      	mov	r4, r0
 8004888:	d14d      	bne.n	8004926 <_malloc_r+0xde>
 800488a:	6834      	ldr	r4, [r6, #0]
 800488c:	4626      	mov	r6, r4
 800488e:	2e00      	cmp	r6, #0
 8004890:	d140      	bne.n	8004914 <_malloc_r+0xcc>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	4631      	mov	r1, r6
 8004896:	4638      	mov	r0, r7
 8004898:	eb04 0803 	add.w	r8, r4, r3
 800489c:	f000 f878 	bl	8004990 <_sbrk_r>
 80048a0:	4580      	cmp	r8, r0
 80048a2:	d13a      	bne.n	800491a <_malloc_r+0xd2>
 80048a4:	6821      	ldr	r1, [r4, #0]
 80048a6:	3503      	adds	r5, #3
 80048a8:	1a6d      	subs	r5, r5, r1
 80048aa:	f025 0503 	bic.w	r5, r5, #3
 80048ae:	3508      	adds	r5, #8
 80048b0:	2d0c      	cmp	r5, #12
 80048b2:	bf38      	it	cc
 80048b4:	250c      	movcc	r5, #12
 80048b6:	4629      	mov	r1, r5
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff ffa5 	bl	8004808 <sbrk_aligned>
 80048be:	3001      	adds	r0, #1
 80048c0:	d02b      	beq.n	800491a <_malloc_r+0xd2>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	442b      	add	r3, r5
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	e00e      	b.n	80048e8 <_malloc_r+0xa0>
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	1b52      	subs	r2, r2, r5
 80048ce:	d41e      	bmi.n	800490e <_malloc_r+0xc6>
 80048d0:	2a0b      	cmp	r2, #11
 80048d2:	d916      	bls.n	8004902 <_malloc_r+0xba>
 80048d4:	1961      	adds	r1, r4, r5
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	6025      	str	r5, [r4, #0]
 80048da:	bf18      	it	ne
 80048dc:	6059      	strne	r1, [r3, #4]
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	bf08      	it	eq
 80048e2:	6031      	streq	r1, [r6, #0]
 80048e4:	5162      	str	r2, [r4, r5]
 80048e6:	604b      	str	r3, [r1, #4]
 80048e8:	4638      	mov	r0, r7
 80048ea:	f104 060b 	add.w	r6, r4, #11
 80048ee:	f000 f865 	bl	80049bc <__malloc_unlock>
 80048f2:	f026 0607 	bic.w	r6, r6, #7
 80048f6:	1d23      	adds	r3, r4, #4
 80048f8:	1af2      	subs	r2, r6, r3
 80048fa:	d0b6      	beq.n	800486a <_malloc_r+0x22>
 80048fc:	1b9b      	subs	r3, r3, r6
 80048fe:	50a3      	str	r3, [r4, r2]
 8004900:	e7b3      	b.n	800486a <_malloc_r+0x22>
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	42a3      	cmp	r3, r4
 8004906:	bf0c      	ite	eq
 8004908:	6032      	streq	r2, [r6, #0]
 800490a:	605a      	strne	r2, [r3, #4]
 800490c:	e7ec      	b.n	80048e8 <_malloc_r+0xa0>
 800490e:	4623      	mov	r3, r4
 8004910:	6864      	ldr	r4, [r4, #4]
 8004912:	e7b2      	b.n	800487a <_malloc_r+0x32>
 8004914:	4634      	mov	r4, r6
 8004916:	6876      	ldr	r6, [r6, #4]
 8004918:	e7b9      	b.n	800488e <_malloc_r+0x46>
 800491a:	230c      	movs	r3, #12
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4638      	mov	r0, r7
 8004920:	f000 f84c 	bl	80049bc <__malloc_unlock>
 8004924:	e7a1      	b.n	800486a <_malloc_r+0x22>
 8004926:	6025      	str	r5, [r4, #0]
 8004928:	e7de      	b.n	80048e8 <_malloc_r+0xa0>
 800492a:	bf00      	nop
 800492c:	2000023c 	.word	0x2000023c

08004930 <_realloc_r>:
 8004930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	4680      	mov	r8, r0
 8004936:	4614      	mov	r4, r2
 8004938:	460e      	mov	r6, r1
 800493a:	b921      	cbnz	r1, 8004946 <_realloc_r+0x16>
 800493c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004940:	4611      	mov	r1, r2
 8004942:	f7ff bf81 	b.w	8004848 <_malloc_r>
 8004946:	b92a      	cbnz	r2, 8004954 <_realloc_r+0x24>
 8004948:	f7ff ff12 	bl	8004770 <_free_r>
 800494c:	4625      	mov	r5, r4
 800494e:	4628      	mov	r0, r5
 8004950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004954:	f000 f838 	bl	80049c8 <_malloc_usable_size_r>
 8004958:	4284      	cmp	r4, r0
 800495a:	4607      	mov	r7, r0
 800495c:	d802      	bhi.n	8004964 <_realloc_r+0x34>
 800495e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004962:	d812      	bhi.n	800498a <_realloc_r+0x5a>
 8004964:	4621      	mov	r1, r4
 8004966:	4640      	mov	r0, r8
 8004968:	f7ff ff6e 	bl	8004848 <_malloc_r>
 800496c:	4605      	mov	r5, r0
 800496e:	2800      	cmp	r0, #0
 8004970:	d0ed      	beq.n	800494e <_realloc_r+0x1e>
 8004972:	42bc      	cmp	r4, r7
 8004974:	4622      	mov	r2, r4
 8004976:	4631      	mov	r1, r6
 8004978:	bf28      	it	cs
 800497a:	463a      	movcs	r2, r7
 800497c:	f7ff fed0 	bl	8004720 <memcpy>
 8004980:	4631      	mov	r1, r6
 8004982:	4640      	mov	r0, r8
 8004984:	f7ff fef4 	bl	8004770 <_free_r>
 8004988:	e7e1      	b.n	800494e <_realloc_r+0x1e>
 800498a:	4635      	mov	r5, r6
 800498c:	e7df      	b.n	800494e <_realloc_r+0x1e>
	...

08004990 <_sbrk_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d06      	ldr	r5, [pc, #24]	; (80049ac <_sbrk_r+0x1c>)
 8004994:	2300      	movs	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	f7fc f99e 	bl	8000cdc <_sbrk>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_sbrk_r+0x1a>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_sbrk_r+0x1a>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20000244 	.word	0x20000244

080049b0 <__malloc_lock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__malloc_lock+0x8>)
 80049b2:	f000 b811 	b.w	80049d8 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000248 	.word	0x20000248

080049bc <__malloc_unlock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__malloc_unlock+0x8>)
 80049be:	f000 b80c 	b.w	80049da <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000248 	.word	0x20000248

080049c8 <_malloc_usable_size_r>:
 80049c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049cc:	1f18      	subs	r0, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bfbc      	itt	lt
 80049d2:	580b      	ldrlt	r3, [r1, r0]
 80049d4:	18c0      	addlt	r0, r0, r3
 80049d6:	4770      	bx	lr

080049d8 <__retarget_lock_acquire_recursive>:
 80049d8:	4770      	bx	lr

080049da <__retarget_lock_release_recursive>:
 80049da:	4770      	bx	lr

080049dc <_init>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr

080049e8 <_fini>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr
